{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Developper Community of OYMotion Products gForce100 gForcePro/Pro+ gForceJoint SDK SDK List SDK Manual APPs OTrain gForceApp for gForce100/gForcePro gForceApp for gForcePro+ oym8CHWave 8 channel wave ploter","title":"Home"},{"location":"#welcome-to-developper-community-of-oymotion","text":"","title":"Welcome to Developper Community of OYMotion"},{"location":"#products","text":"gForce100 gForcePro/Pro+ gForceJoint","title":"Products"},{"location":"#sdk","text":"SDK List SDK Manual","title":"SDK"},{"location":"#apps","text":"OTrain gForceApp for gForce100/gForcePro gForceApp for gForcePro+ oym8CHWave 8 channel wave ploter","title":"APPs"},{"location":"APPs/OTrain/","text":"OTrain for gForcePro OTrain is used to capture EMG data from gForcePro, train gesture model and download model to gForcePro Gestures are customizable After gForcePro is updated with trained model, it works off-line Hardware required gForcePro USB Dongle Screenshots Download Download click here","title":"OTrain"},{"location":"APPs/OTrain/#otrain-for-gforcepro","text":"OTrain is used to capture EMG data from gForcePro, train gesture model and download model to gForcePro Gestures are customizable After gForcePro is updated with trained model, it works off-line","title":"OTrain for gForcePro"},{"location":"APPs/OTrain/#hardware-required","text":"gForcePro USB Dongle","title":"Hardware required"},{"location":"APPs/OTrain/#screenshots","text":"","title":"Screenshots"},{"location":"APPs/OTrain/#download","text":"Download click here","title":"Download"},{"location":"APPs/gForceApp/","text":"gForce App for gForcePro+ gForce App integrates gForce control, IMU/EMG data display, gesture training, training model uploading and downloading, all in one App. Screenshots Download Click here to download gForce APP","title":"gForceApp for gForcePro+"},{"location":"APPs/gForceApp/#gforce-app-for-gforcepro","text":"gForce App integrates gForce control, IMU/EMG data display, gesture training, training model uploading and downloading, all in one App.","title":"gForce App for gForcePro+"},{"location":"APPs/gForceApp/#screenshots","text":"","title":"Screenshots"},{"location":"APPs/gForceApp/#download","text":"Click here to download gForce APP","title":"Download"},{"location":"APPs/gForceAppLegacy/","text":"gForceAPP for gForce100/gForcePro gForceAPP for gForce100/gForcePro is an Android based to view armband gestures and quaternion. Click here to download. Note : For gForcePro+, we offer a new mobile app, see gForceAPP for gForcePro+ for more information.","title":"gForceApp for gForce100/gForcePro"},{"location":"APPs/gForceAppLegacy/#gforceapp-for-gforce100gforcepro","text":"gForceAPP for gForce100/gForcePro is an Android based to view armband gestures and quaternion. Click here to download. Note : For gForcePro+, we offer a new mobile app, see gForceAPP for gForcePro+ for more information.","title":"gForceAPP for gForce100/gForcePro"},{"location":"APPs/oym8CHWave/","text":"oym8CHWave Open source EMG data manipulation tool for gForcePro/gForcePro+. Displays waveforms according to EMG data from gForcePro. Sends sound on/off bit flags to oym8CHWaveArduino if oym8CHWaveArduino is connected. Screenshots Download Download click here Source code View source click here","title":"oym8CHWave"},{"location":"APPs/oym8CHWave/#oym8chwave","text":"Open source EMG data manipulation tool for gForcePro/gForcePro+. Displays waveforms according to EMG data from gForcePro. Sends sound on/off bit flags to oym8CHWaveArduino if oym8CHWaveArduino is connected.","title":"oym8CHWave"},{"location":"APPs/oym8CHWave/#screenshots","text":"","title":"Screenshots"},{"location":"APPs/oym8CHWave/#download","text":"Download click here","title":"Download"},{"location":"APPs/oym8CHWave/#source-code","text":"View source click here","title":"Source code"},{"location":"gForce100/gForce100UserGuide/","text":"gForce 100 Armband User Guide July 6th, 2017 Overview gForce 100 Armband is a smart wearable Human Interface Device for gesture recognition . It recognizes gestures according to the sEMG signals of human forearms, and as well as calculates orientation data in quaternions or Euler Angles from its built-in 9-axis IMU . Comparing with the other gesture recognition devices that are based on the computer vision technology, gForce Armband has the advantage of no dependency of embient light, no strictness with angle, much lower energy and much lower cost. Turning on/off Turn on When gForce 100 Armband is off, its green LED light will be off. To turn it on, simply press the button in the middle of its main block. When gForce 100 Armband starts to power on, it will vibrate for about 0.5 second. Once it is successfully powered up, the green LED light flashes at a frequency of 4HZ with 2 seconds on and 2 seconds off. Make sure the armband has sufficient power, otherwise re-charge it with a micro USB line. Turn off When gForce 100 Armband is on, pressing and holding the button for about 5 seconds and then releasing will turn it off. The green LED being off indicates the device has been turned off successfully. Note : If gForce 100 Armband is not in use, please turn it off. Right now the auto-low-power mode is not implemented yet. Re-charging gForce 100 Armband is equipped with Li-ion battery (200mAh). The USB port on the main block is used for battery re-charging. During re-charging, the red light LED on the main block is on. Re-charging will maximally take 2 hours, and after re-charging completes, the red light LED is turned off. Note : gForce 100 Armband is NOT designed to work during re-charging, as this brings in electrical noise which contaminates the weak EMG biometric signals. Other Status Indication After successfully connecting with a BLE central device (e.g. gForceJoint, gForceDongle or any other BLE central device), the green LED light flashes at 5HZ when any data (e.g. quaternion, gesture or raw data) switch is on. The device will vibrate for about 100ms when a gesture is recognized. Instructions to Wearing and Performing Gestures To make sure gForce armband can recognize your gestures, please refer to Guide to Performing Gestures and spend several minutes learning and training yourself. The recognition rate can reach 95% and even higher after you get familiar with performing the gestures properly. Predefined Gestures The six predefined gestures are: Fist Spread Fingers Wave In Wave Out Pinch Shoot Note : When both your arm and hand are at a rest state, it will be recognized as a ' Relax ' gesture.","title":"gForce100"},{"location":"gForce100/gForce100UserGuide/#gforce-100-armband-user-guide","text":"July 6th, 2017","title":"gForce 100 Armband User Guide"},{"location":"gForce100/gForce100UserGuide/#overview","text":"gForce 100 Armband is a smart wearable Human Interface Device for gesture recognition . It recognizes gestures according to the sEMG signals of human forearms, and as well as calculates orientation data in quaternions or Euler Angles from its built-in 9-axis IMU . Comparing with the other gesture recognition devices that are based on the computer vision technology, gForce Armband has the advantage of no dependency of embient light, no strictness with angle, much lower energy and much lower cost.","title":"Overview"},{"location":"gForce100/gForce100UserGuide/#turning-onoff","text":"Turn on When gForce 100 Armband is off, its green LED light will be off. To turn it on, simply press the button in the middle of its main block. When gForce 100 Armband starts to power on, it will vibrate for about 0.5 second. Once it is successfully powered up, the green LED light flashes at a frequency of 4HZ with 2 seconds on and 2 seconds off. Make sure the armband has sufficient power, otherwise re-charge it with a micro USB line. Turn off When gForce 100 Armband is on, pressing and holding the button for about 5 seconds and then releasing will turn it off. The green LED being off indicates the device has been turned off successfully. Note : If gForce 100 Armband is not in use, please turn it off. Right now the auto-low-power mode is not implemented yet.","title":"Turning on/off"},{"location":"gForce100/gForce100UserGuide/#re-charging","text":"gForce 100 Armband is equipped with Li-ion battery (200mAh). The USB port on the main block is used for battery re-charging. During re-charging, the red light LED on the main block is on. Re-charging will maximally take 2 hours, and after re-charging completes, the red light LED is turned off. Note : gForce 100 Armband is NOT designed to work during re-charging, as this brings in electrical noise which contaminates the weak EMG biometric signals.","title":"Re-charging"},{"location":"gForce100/gForce100UserGuide/#other-status-indication","text":"After successfully connecting with a BLE central device (e.g. gForceJoint, gForceDongle or any other BLE central device), the green LED light flashes at 5HZ when any data (e.g. quaternion, gesture or raw data) switch is on. The device will vibrate for about 100ms when a gesture is recognized.","title":"Other Status Indication"},{"location":"gForce100/gForce100UserGuide/#instructions-to-wearing-and-performing-gestures","text":"To make sure gForce armband can recognize your gestures, please refer to Guide to Performing Gestures and spend several minutes learning and training yourself. The recognition rate can reach 95% and even higher after you get familiar with performing the gestures properly.","title":"Instructions to Wearing and Performing Gestures"},{"location":"gForce100/gForce100UserGuide/#predefined-gestures","text":"The six predefined gestures are: Fist Spread Fingers Wave In Wave Out Pinch Shoot Note : When both your arm and hand are at a rest state, it will be recognized as a ' Relax ' gesture.","title":"Predefined Gestures"},{"location":"gForceJoint/gForceJoint/","text":"gForce Joint August 28th, 2020 Brief This document tries to guiding how one can use gForce gesture armband with Arduino. Before continuing, please make sure you have sufficient experience with Arduino , and ArduinoIDE was installed on your PC. What is Arduino How to install ArduinoIDE Learn Arduino gForce Joint Usage This chapter guides the steps to connect gForce Joint to Arm band. The following names are being used: gForceJoint, gForce, gForceSDKArduino, ArduinoMEGA What is gForce What is gForceJoint What is gForceSDKArduino What is ArduinoMEGA Step 1: Import gForceSDKArduino How to import gForceSDKArduino Step 2: Test communication between gForceJoint and ArduinoMEGA Wire gForceJoint with ArduinoMEGA: in this demo case, gForceJoint is connected to MEGA\u2019s Serial Port #2 (gForceJoint (TX) => MEGA (RX2)) Open gForceJointTest in ArduinoIDE. Compile and upload to ArduinoMEGA. Open the Serial Port Monitor from ArduinoIDE. Set the serial port monitor with a baud rate of 115200bps. Pair and connect gForce armband to gForceJoint, perform the gestures that\u2019s defined, check if the information printed out in the Serial Port Monitor is correct, and hence make sure the connect between gForceJoint and MEGA works. Q&A How to wear gForce armband? If a gForce-100 is used, users should follow wearing instruction and gesture strictly. How to connect gForce with gForceJoint wirelessly? Turn on gForce armband, the green led should flash slowly Make sure gForceJoint is powered on Put gForce armband close to gForceJoint such as within 10 cm of distance. gForce armband will automatically connect to gForceJoint. The green led should flash much faster. If not, make sure gForceJoint is not connected to other gForce armband. Only one armband is allowed. And, make sure, power is on. Note : One should make sure gForceJoint works with ArduinoMEGA before continuing. Possible mistakes are: Wiring mistakes between gForceJoint and ArduinoMEAG gForce doesn\u2019t connect with gForceJoint because distance. When connecting, gForce armband and gForceJoint HAVE to be within a short distance as close as possible such as 10 cm. User doesn\u2019t follow armband wearing and gestures.","title":"gForceJoint"},{"location":"gForceJoint/gForceJoint/#gforce-joint","text":"August 28th, 2020","title":"gForce Joint"},{"location":"gForceJoint/gForceJoint/#brief","text":"This document tries to guiding how one can use gForce gesture armband with Arduino. Before continuing, please make sure you have sufficient experience with Arduino , and ArduinoIDE was installed on your PC. What is Arduino How to install ArduinoIDE Learn Arduino","title":"Brief"},{"location":"gForceJoint/gForceJoint/#gforce-joint-usage","text":"This chapter guides the steps to connect gForce Joint to Arm band. The following names are being used: gForceJoint, gForce, gForceSDKArduino, ArduinoMEGA What is gForce What is gForceJoint What is gForceSDKArduino What is ArduinoMEGA","title":"gForce Joint Usage"},{"location":"gForceJoint/gForceJoint/#step-1-import-gforcesdkarduino","text":"How to import gForceSDKArduino","title":"Step 1: Import gForceSDKArduino"},{"location":"gForceJoint/gForceJoint/#step-2-test-communication-between-gforcejoint-and-arduinomega","text":"Wire gForceJoint with ArduinoMEGA: in this demo case, gForceJoint is connected to MEGA\u2019s Serial Port #2 (gForceJoint (TX) => MEGA (RX2)) Open gForceJointTest in ArduinoIDE. Compile and upload to ArduinoMEGA. Open the Serial Port Monitor from ArduinoIDE. Set the serial port monitor with a baud rate of 115200bps. Pair and connect gForce armband to gForceJoint, perform the gestures that\u2019s defined, check if the information printed out in the Serial Port Monitor is correct, and hence make sure the connect between gForceJoint and MEGA works.","title":"Step 2: Test communication between gForceJoint and ArduinoMEGA"},{"location":"gForceJoint/gForceJoint/#qa","text":"How to wear gForce armband? If a gForce-100 is used, users should follow wearing instruction and gesture strictly. How to connect gForce with gForceJoint wirelessly? Turn on gForce armband, the green led should flash slowly Make sure gForceJoint is powered on Put gForce armband close to gForceJoint such as within 10 cm of distance. gForce armband will automatically connect to gForceJoint. The green led should flash much faster. If not, make sure gForceJoint is not connected to other gForce armband. Only one armband is allowed. And, make sure, power is on. Note : One should make sure gForceJoint works with ArduinoMEGA before continuing. Possible mistakes are: Wiring mistakes between gForceJoint and ArduinoMEAG gForce doesn\u2019t connect with gForceJoint because distance. When connecting, gForce armband and gForceJoint HAVE to be within a short distance as close as possible such as 10 cm. User doesn\u2019t follow armband wearing and gestures.","title":"Q&amp;A"},{"location":"gForcePro/gForcePro/","text":"gForcePro/gForcePro+ Armband User Guide August 28th, 2020 Overview gForcePro/gForcePro+ Armband is a smart wearable Human Interface Device for gesture recognition . It recognizes gestures according to the sEMG signals of human forearms, and as well as calculates orientation data in quaternions or Euler Angles from its built-in 9-axis IMU . Comparing with the other gesture recognition devices that are based on the computer vision technology, gForce Armband has the advantage of no dependency of embient light, no strictness with angle, much lower energy and much lower cost. Turning on/off Turn on When gForcePro/gForcePro+ Armband is off, its green LED light will be off. To turn it on, simply press the button in the middle of its main block. When gForcePro/gForcePro+ Armband starts to power on, it will vibrate for about 0.5 second. Once it is successfully powered up, the green LED light flashes at a frequency of 4HZ with 2 seconds on and 2 seconds off. Make sure the armband has sufficient power, otherwise re-charge it with a micro USB line. Turn off When gForcePro/gForcePro+ Armband is on, pressing and holding the button for about 5 seconds and then releasing will turn it off. The green LED being off indicates the device has been turned off successfully. Note : If gForcePro/gForcePro+ Armband is not in use, please turn it off. Right now the auto-low-power mode is not implemented yet. Re-charging gForcePro/gForcePro+ Armband is equipped with Li-ion battery (200mAh). The USB port on the main block is used for battery re-charging. During re-charging, the red light LED on the main block is on. Re-charging will maximally take 2 hours, and after re-charging completes, the red light LED is turned off. Note : gForcePro/gForcePro+ Armband is NOT designed to work during re-charging, as this brings in electrical noise which contaminates the weak EMG biometric signals. Other Status Indication After successfully connecting with a BLE central device (e.g. gForceJoint, gForceDongle or any other BLE central device), the green LED light flashes at 5HZ when any data (e.g. quaternion, gesture or raw data) switch is on. The device will vibrate for about 100ms when a gesture is recognized. Gesture Training gForcePro gForcePro supports user gesture training with help of OTrain desktop APP. Refer to OTrain for more details. gForcePro+ gForcePro+ uses gForce APP to train user gestures. Refer to gForce APP for more details. Fetch EMG/Qurternion/... Data Via SDK Use gForceSDKCXX , gForceSDKCSharp , gForceSDKPython to fetch EMG data, etc. See SDK list & gForceSDK manual for help. Via oym8CHWave Refer to oym8CHWave for more details.","title":"gForcePro/gForcePro+"},{"location":"gForcePro/gForcePro/#gforceprogforcepro-armband-user-guide","text":"August 28th, 2020","title":"gForcePro/gForcePro+ Armband User Guide"},{"location":"gForcePro/gForcePro/#overview","text":"gForcePro/gForcePro+ Armband is a smart wearable Human Interface Device for gesture recognition . It recognizes gestures according to the sEMG signals of human forearms, and as well as calculates orientation data in quaternions or Euler Angles from its built-in 9-axis IMU . Comparing with the other gesture recognition devices that are based on the computer vision technology, gForce Armband has the advantage of no dependency of embient light, no strictness with angle, much lower energy and much lower cost.","title":"Overview"},{"location":"gForcePro/gForcePro/#turning-onoff","text":"Turn on When gForcePro/gForcePro+ Armband is off, its green LED light will be off. To turn it on, simply press the button in the middle of its main block. When gForcePro/gForcePro+ Armband starts to power on, it will vibrate for about 0.5 second. Once it is successfully powered up, the green LED light flashes at a frequency of 4HZ with 2 seconds on and 2 seconds off. Make sure the armband has sufficient power, otherwise re-charge it with a micro USB line. Turn off When gForcePro/gForcePro+ Armband is on, pressing and holding the button for about 5 seconds and then releasing will turn it off. The green LED being off indicates the device has been turned off successfully. Note : If gForcePro/gForcePro+ Armband is not in use, please turn it off. Right now the auto-low-power mode is not implemented yet.","title":"Turning on/off"},{"location":"gForcePro/gForcePro/#re-charging","text":"gForcePro/gForcePro+ Armband is equipped with Li-ion battery (200mAh). The USB port on the main block is used for battery re-charging. During re-charging, the red light LED on the main block is on. Re-charging will maximally take 2 hours, and after re-charging completes, the red light LED is turned off. Note : gForcePro/gForcePro+ Armband is NOT designed to work during re-charging, as this brings in electrical noise which contaminates the weak EMG biometric signals.","title":"Re-charging"},{"location":"gForcePro/gForcePro/#other-status-indication","text":"After successfully connecting with a BLE central device (e.g. gForceJoint, gForceDongle or any other BLE central device), the green LED light flashes at 5HZ when any data (e.g. quaternion, gesture or raw data) switch is on. The device will vibrate for about 100ms when a gesture is recognized.","title":"Other Status Indication"},{"location":"gForcePro/gForcePro/#gesture-training","text":"gForcePro gForcePro supports user gesture training with help of OTrain desktop APP. Refer to OTrain for more details. gForcePro+ gForcePro+ uses gForce APP to train user gestures. Refer to gForce APP for more details.","title":"Gesture Training"},{"location":"gForcePro/gForcePro/#fetch-emgqurternion-data","text":"Via SDK Use gForceSDKCXX , gForceSDKCSharp , gForceSDKPython to fetch EMG data, etc. See SDK list & gForceSDK manual for help. Via oym8CHWave Refer to oym8CHWave for more details.","title":"Fetch EMG/Qurternion/... Data"},{"location":"gForceSDK/SDKList/","text":"SDK List gForceSDK C++ for Windows gForceSDK C++ for Windows include gForce SDK dll files and some simple examples for C++. gForceSDK CSharp for Windows gForceSDK CSharp for Windows include gForce SDK dll files for CSharp. gForceSDK Python for Linux gForceSDK Python for Linux is gFroce SDK of python version under linux. Needs bluepy library to work. gForceSDK Unity for Windows gForceSDK Unity include Unity3D examples using OYMotion arm, gForce100/gForcePro/gForcePro+, gloves and OYMotion devices with raw data enabled(for gForcePro/gForcePro+ only). gForceSDK for Arduino gForceSDK Arduino is for using gForce100/gForcePro/gForcePro+ and gForceJoint with Arduino and Arduino-compatible devices. It offers an easy way for Arduino-alike devices to connect to gForce Armband and read data such as gestures and quaternions from it. gForceSDK for Embedded gForceSDK Embedded is for using gForce100/gForcePro/gForcePro+ and gForceJoint with embedded devices. It offers an easy way for embedded devices to connect to gForce Armband and read data such as gestures, quaternions and emg raw data from it. gForceDataProtocolSample for Android gForceDataProtocolSample is for using gForce100/gForcePro/gForcePro+ in Android based systems.","title":"SDK List"},{"location":"gForceSDK/SDKList/#sdk-list","text":"","title":"SDK List"},{"location":"gForceSDK/SDKList/#gforcesdk-c-for-windows","text":"gForceSDK C++ for Windows include gForce SDK dll files and some simple examples for C++.","title":"gForceSDK C++ for Windows"},{"location":"gForceSDK/SDKList/#gforcesdk-csharp-for-windows","text":"gForceSDK CSharp for Windows include gForce SDK dll files for CSharp.","title":"gForceSDK CSharp for Windows"},{"location":"gForceSDK/SDKList/#gforcesdk-python-for-linux","text":"gForceSDK Python for Linux is gFroce SDK of python version under linux. Needs bluepy library to work.","title":"gForceSDK Python for Linux"},{"location":"gForceSDK/SDKList/#gforcesdk-unity-for-windows","text":"gForceSDK Unity include Unity3D examples using OYMotion arm, gForce100/gForcePro/gForcePro+, gloves and OYMotion devices with raw data enabled(for gForcePro/gForcePro+ only).","title":"gForceSDK Unity for Windows"},{"location":"gForceSDK/SDKList/#gforcesdk-for-arduino","text":"gForceSDK Arduino is for using gForce100/gForcePro/gForcePro+ and gForceJoint with Arduino and Arduino-compatible devices. It offers an easy way for Arduino-alike devices to connect to gForce Armband and read data such as gestures and quaternions from it.","title":"gForceSDK for Arduino"},{"location":"gForceSDK/SDKList/#gforcesdk-for-embedded","text":"gForceSDK Embedded is for using gForce100/gForcePro/gForcePro+ and gForceJoint with embedded devices. It offers an easy way for embedded devices to connect to gForce Armband and read data such as gestures, quaternions and emg raw data from it.","title":"gForceSDK for Embedded"},{"location":"gForceSDK/SDKList/#gforcedataprotocolsample-for-android","text":"gForceDataProtocolSample is for using gForce100/gForcePro/gForcePro+ in Android based systems.","title":"gForceDataProtocolSample for Android"},{"location":"gForceSDK/gForceSDK/","text":"gForce SDK Manual Functions to Get Data SDK Type Orientation Data Gesture Data Device Status Other Data* Data Config Function gForceCXX onOrientationData(...)** onGestureData(...)** onDeviceStatusChanged(...)** onExtendedDeviceData(...)** DeviceSetting::setDataNotifSwitch(...) gForceCSharp onOrientationData(...)** onGestureData(...)** onDeviceStatusChanged(...)** onExtendedDeviceData(...)** setNotification(...) gForceUnity onOrientationData(...)** onGestureData(...)** onDeviceStatusChanged(...)** onExtendedDeviceData(...)** setNotification(...) gForcePython Callback of GF.startDataNotification(...) Callback of GF.startDataNotification(...) Callback of GF.startDataNotification(...) Callback of GF.startDataNotification(...) GF.setDataNotifSwitch(...) gForceArduino GForceAdapter::GetGForceData(...) GForceAdapter::GetGForceData(...) GForceAdapter::GetGForceData(...) GForceAdapter::GetGForceData(...)*** NA gForceEmbedded GForceAdapter::GetGForceData(...) GForceAdapter::GetGForceData(...) GForceAdapter::GetGForceData(...) GForceAdapter::GetGForceData(...)*** NA Note : * : Includes 10 data types ** : In subclass of HubListener *** : Only EMG data supported. Data Format in Callback Callback will be invoked (e.g., onExtendedDeviceData(...) in subclass of HubListener or user callback of GF.startDataNotification(...) ) when desired data notification comes. Data format: Notification Data Type Data Packet Length First Byte Value Data Content* Comment Acceletor 13 0x01 (NTF_ACC_DATA) Acceletor_X(4 Byte long), Acceletor_Y, Acceletor_Z Accelerate speed of axis x,y and z Gyroscope 13 0x02 (NTF_GYO_DATA) Gyroscope_X(4 Byte long), Gyroscope_Y, Gyroscope_Z Magnetometer 13 0x03 (NTF_MAG_DATA) Gyroscope_X(4 Byte long), Compass_Y, Compass_Z Euler Angle 13 0x04 (NTF_EULER_DATA) Pitch(4 Byte float), Roll, Yaw Euler angle data is in degree. Pitch and Roll is in the range of [-180, 180], Yaw is in the range of [-90, 90] Quaternion 17 0x05 (NTF_QUAT_FLOAT_DATA) Quaternion_W(4 Byte float), Quaternion_X, Quaternion_Y, Quaternion_Z Rotation Matrix 37 0x06 (NTF_ROTA_DATA) Rot[0][0], Rot[0][1], Rot[0][2], Rot[1][0],... 3*3 Rotation matrix of data type long, leading 3 4-bytes integer represent the first row of matrix and so on Gesture 3 0x07 (NTF_EMG_GEST_DATA) Gesture identify(1 Byte uint), Probability(1 Byte uint) Possibility is in the range of [0, 100] Raw EMG 129 0x08 (NTF_EMG_ADC_DATA) CH0,CH1...CH7, CH0,CH1...CH7, ... Packet length depends on config of EMG, defalut 129. If resolution set to 8, 1 byte represents data of 1 channel. 2 bytes for 1 channel incase of resolution=12. Mouse NA 0x09 (NTF_HID_MOUSE) NA Not currently supported Joystick NA 0x0A (NTF_HID_JOYSTICK) NA Not currently supported Device Status 2 0x0B (NTF_DEV_STATUS) bit0 is for Recenter status, bit1 is for USB insert, bit2 is for USB unplug, bit3 is for motionless status; bit4 - bit7 is reserved 1 Byte for new device status Log Message >= 1 0x0C (NTF_LOG_DATA) log message string * : Starts from second byte of data packet. Examples For Getting Data from gForce Get EMG raw data examples C++ 1. Implement HubListener interface class HubListenerImpl : public HubListener{...} 2. Config EMG data Call DeviceSetting::setEMGRawDataConfig(...); to configure Emg. First parameter is sample Rate in Hz, second parameter is channel Mask, third parameter is package data length, fourth parameter is Adc resolution, Fifth parameter is callback function. 3. Open ACC Data Notification Call DeviceSetting::setDataNotifySwitch(...) to open EMG raw. Set first parameter as DeviceSetting::DNF_EMG_RAW 4. Extract the data of EMG, etc. void onExtendedDeviceData(SPDEVICE device, DeviceDataType dataType, gfsPtr<const vector<GF_UINT8>> data) override { switch (dataType) { case DeviceDataType::DDT_EMGRAW: auto ptr = data->data(); for (int i = 0; i < 128/*depends on setting*/; i++) { //for 8bpp mode printf(\"Emg data [%d] = %u\\n\", i, *(reinterpret_cast<const uint8_t*>(ptr++))); //for 12bpp mode // printf(\"Emg data [%d] = %u\\n\", i, *(reinterpret_cast<const uint16_t*>(ptr))); // ptr += 2; } break; case DeviceDataType::DDT_GYROSCOPE: //... extract gyroscope data form 'data' break; default: break; } } Python DATA_LEN = 128 def ondata(data): if data[0] == NotifDataType['DNF_EMG_RAW'] and len(data) == DATA_LEN + 1: # Data for EMG CH0~CHn repeatly. # Resolution set in setEmgRawDataConfig: # 8: one byte for one channel # 12: two bytes in LSB for one channel. # eg. 8bpp mode, data[1] = channel[0], data[2] = channel[1], ... data[8] = channel[7] # data[9] = channel[0] and so on # eg. 12bpp mode, {data[2], data[1]} = channel[0], {data[4], data[3]} = channel[1] and so on for i in range(1, DATA_LEN): print(data[i]) def set_cmd_cb(resp): print('Command result: {}'.format(resp)) GF = GForceProfile() GF.setEmgRawDataConfig(sampRate = 650, channelMask = 0xFF, dataLen = DATA_LEN, resolution = 8, cb = set_cmd_cb, timeout = 1000) GF.setDataNotifSwitch(DataNotifFlags['DNF_EMG_RAW'], set_cmd_cb, timeout = 1000) GF.startDataNotification(ondata) button = input() if len(button) != 0: GF.stopDataNotification() GF.setDataNotifSwitch(DataNotifFlags['DNF_OFF'], set_cmd_cb, timeout = 1000) CSharp 1. Call setEmgConfig(...) configure EMG data setEmgConfig(650/*sampleRateHz*/, 0x00FF/*interestedChannels*/, 128/*packageDataLength*/, 8/*adcResolution*/); 2. Call setNotification(...) open EMG raw setNotification((uint)DataNotifFlags.DNF_EMG_RAW); 3. print the data of EMG raw public override void onExtendedDeviceData(Device device, Device.DataType type, byte[] data) { if (device == gForceHub_.connectedDevice_ && type == Emgraw) { System.Console.Write(\"Emg data len: {0}, data:\" , data.Length); var sb = new StringBuilder(\"{\"); foreach (var b in data) { sb.Append(b + \",\"); } sb.Remove(sb.Length - 1, 1); sb.Append(\"}\"); System.Console.WriteLine(sb.ToString()); } } Note : Data transfers should be off when configuring data types and starting/stoping data notification.","title":"SDK Manual"},{"location":"gForceSDK/gForceSDK/#gforce-sdk-manual","text":"","title":"gForce SDK Manual"},{"location":"gForceSDK/gForceSDK/#functions-to-get-data","text":"SDK Type Orientation Data Gesture Data Device Status Other Data* Data Config Function gForceCXX onOrientationData(...)** onGestureData(...)** onDeviceStatusChanged(...)** onExtendedDeviceData(...)** DeviceSetting::setDataNotifSwitch(...) gForceCSharp onOrientationData(...)** onGestureData(...)** onDeviceStatusChanged(...)** onExtendedDeviceData(...)** setNotification(...) gForceUnity onOrientationData(...)** onGestureData(...)** onDeviceStatusChanged(...)** onExtendedDeviceData(...)** setNotification(...) gForcePython Callback of GF.startDataNotification(...) Callback of GF.startDataNotification(...) Callback of GF.startDataNotification(...) Callback of GF.startDataNotification(...) GF.setDataNotifSwitch(...) gForceArduino GForceAdapter::GetGForceData(...) GForceAdapter::GetGForceData(...) GForceAdapter::GetGForceData(...) GForceAdapter::GetGForceData(...)*** NA gForceEmbedded GForceAdapter::GetGForceData(...) GForceAdapter::GetGForceData(...) GForceAdapter::GetGForceData(...) GForceAdapter::GetGForceData(...)*** NA Note : * : Includes 10 data types ** : In subclass of HubListener *** : Only EMG data supported.","title":"Functions to Get Data"},{"location":"gForceSDK/gForceSDK/#data-format-in-callback","text":"Callback will be invoked (e.g., onExtendedDeviceData(...) in subclass of HubListener or user callback of GF.startDataNotification(...) ) when desired data notification comes. Data format: Notification Data Type Data Packet Length First Byte Value Data Content* Comment Acceletor 13 0x01 (NTF_ACC_DATA) Acceletor_X(4 Byte long), Acceletor_Y, Acceletor_Z Accelerate speed of axis x,y and z Gyroscope 13 0x02 (NTF_GYO_DATA) Gyroscope_X(4 Byte long), Gyroscope_Y, Gyroscope_Z Magnetometer 13 0x03 (NTF_MAG_DATA) Gyroscope_X(4 Byte long), Compass_Y, Compass_Z Euler Angle 13 0x04 (NTF_EULER_DATA) Pitch(4 Byte float), Roll, Yaw Euler angle data is in degree. Pitch and Roll is in the range of [-180, 180], Yaw is in the range of [-90, 90] Quaternion 17 0x05 (NTF_QUAT_FLOAT_DATA) Quaternion_W(4 Byte float), Quaternion_X, Quaternion_Y, Quaternion_Z Rotation Matrix 37 0x06 (NTF_ROTA_DATA) Rot[0][0], Rot[0][1], Rot[0][2], Rot[1][0],... 3*3 Rotation matrix of data type long, leading 3 4-bytes integer represent the first row of matrix and so on Gesture 3 0x07 (NTF_EMG_GEST_DATA) Gesture identify(1 Byte uint), Probability(1 Byte uint) Possibility is in the range of [0, 100] Raw EMG 129 0x08 (NTF_EMG_ADC_DATA) CH0,CH1...CH7, CH0,CH1...CH7, ... Packet length depends on config of EMG, defalut 129. If resolution set to 8, 1 byte represents data of 1 channel. 2 bytes for 1 channel incase of resolution=12. Mouse NA 0x09 (NTF_HID_MOUSE) NA Not currently supported Joystick NA 0x0A (NTF_HID_JOYSTICK) NA Not currently supported Device Status 2 0x0B (NTF_DEV_STATUS) bit0 is for Recenter status, bit1 is for USB insert, bit2 is for USB unplug, bit3 is for motionless status; bit4 - bit7 is reserved 1 Byte for new device status Log Message >= 1 0x0C (NTF_LOG_DATA) log message string * : Starts from second byte of data packet.","title":"Data Format in Callback"},{"location":"gForceSDK/gForceSDK/#examples-for-getting-data-from-gforce","text":"Get EMG raw data examples","title":"Examples For Getting Data from gForce"},{"location":"gForceSDK/gForceSDK/#c","text":"1. Implement HubListener interface class HubListenerImpl : public HubListener{...} 2. Config EMG data Call DeviceSetting::setEMGRawDataConfig(...); to configure Emg. First parameter is sample Rate in Hz, second parameter is channel Mask, third parameter is package data length, fourth parameter is Adc resolution, Fifth parameter is callback function. 3. Open ACC Data Notification Call DeviceSetting::setDataNotifySwitch(...) to open EMG raw. Set first parameter as DeviceSetting::DNF_EMG_RAW 4. Extract the data of EMG, etc. void onExtendedDeviceData(SPDEVICE device, DeviceDataType dataType, gfsPtr<const vector<GF_UINT8>> data) override { switch (dataType) { case DeviceDataType::DDT_EMGRAW: auto ptr = data->data(); for (int i = 0; i < 128/*depends on setting*/; i++) { //for 8bpp mode printf(\"Emg data [%d] = %u\\n\", i, *(reinterpret_cast<const uint8_t*>(ptr++))); //for 12bpp mode // printf(\"Emg data [%d] = %u\\n\", i, *(reinterpret_cast<const uint16_t*>(ptr))); // ptr += 2; } break; case DeviceDataType::DDT_GYROSCOPE: //... extract gyroscope data form 'data' break; default: break; } }","title":"C++"},{"location":"gForceSDK/gForceSDK/#python","text":"DATA_LEN = 128 def ondata(data): if data[0] == NotifDataType['DNF_EMG_RAW'] and len(data) == DATA_LEN + 1: # Data for EMG CH0~CHn repeatly. # Resolution set in setEmgRawDataConfig: # 8: one byte for one channel # 12: two bytes in LSB for one channel. # eg. 8bpp mode, data[1] = channel[0], data[2] = channel[1], ... data[8] = channel[7] # data[9] = channel[0] and so on # eg. 12bpp mode, {data[2], data[1]} = channel[0], {data[4], data[3]} = channel[1] and so on for i in range(1, DATA_LEN): print(data[i]) def set_cmd_cb(resp): print('Command result: {}'.format(resp)) GF = GForceProfile() GF.setEmgRawDataConfig(sampRate = 650, channelMask = 0xFF, dataLen = DATA_LEN, resolution = 8, cb = set_cmd_cb, timeout = 1000) GF.setDataNotifSwitch(DataNotifFlags['DNF_EMG_RAW'], set_cmd_cb, timeout = 1000) GF.startDataNotification(ondata) button = input() if len(button) != 0: GF.stopDataNotification() GF.setDataNotifSwitch(DataNotifFlags['DNF_OFF'], set_cmd_cb, timeout = 1000)","title":"Python"},{"location":"gForceSDK/gForceSDK/#csharp","text":"1. Call setEmgConfig(...) configure EMG data setEmgConfig(650/*sampleRateHz*/, 0x00FF/*interestedChannels*/, 128/*packageDataLength*/, 8/*adcResolution*/); 2. Call setNotification(...) open EMG raw setNotification((uint)DataNotifFlags.DNF_EMG_RAW); 3. print the data of EMG raw public override void onExtendedDeviceData(Device device, Device.DataType type, byte[] data) { if (device == gForceHub_.connectedDevice_ && type == Emgraw) { System.Console.Write(\"Emg data len: {0}, data:\" , data.Length); var sb = new StringBuilder(\"{\"); foreach (var b in data) { sb.Append(b + \",\"); } sb.Remove(sb.Length - 1, 1); sb.Append(\"}\"); System.Console.WriteLine(sb.ToString()); } } Note : Data transfers should be off when configuring data types and starting/stoping data notification.","title":"CSharp"}]}