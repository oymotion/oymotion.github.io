{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Developer Community of OYMotion","text":""},{"location":"#products","title":"Products","text":"<ul> <li>gForce200</li> <li>gForcePro/Pro+/Oct</li> <li>gForceJoint</li> </ul>"},{"location":"#sdk","title":"SDK","text":"<ul> <li>SDK List</li> <li>SDK Manual</li> </ul>"},{"location":"#apps","title":"APPs","text":"<ul> <li>OTrain</li> <li>gForceApp for gForce100/gForcePro</li> <li>gForceApp for gForce200/gForcePro+/gForceOct</li> <li>oym8CHWave 8 channel wave plotter</li> </ul>"},{"location":"APPs/OTrain/","title":"OTrain for gForcePro","text":"<ul> <li>OTrain is used to capture EMG data from gForcePro, train gesture model and download model to gForcePro</li> <li>Gestures are customizable</li> <li>After gForcePro is updated with trained model, it works off-line</li> </ul>"},{"location":"APPs/OTrain/#hardware-required","title":"Hardware required","text":"<ul> <li>gForcePro</li> </ul> <ul> <li>USB Dongle</li> </ul>"},{"location":"APPs/OTrain/#screenshots","title":"Screenshots","text":""},{"location":"APPs/OTrain/#download","title":"Download","text":"<p>Download click here</p>"},{"location":"APPs/gForceApp/","title":"gForce App for gForce200/gForcePro+/gForceOct","text":"<p>gForce App integrates gForce control, IMU/EMG data display, gesture training, training model uploading and downloading, all in one App.</p>"},{"location":"APPs/gForceApp/#screenshots","title":"Screenshots","text":""},{"location":"APPs/gForceApp/#download","title":"Download","text":"<p>Click here to download gForce APP. Click here for gForceAPP user guide.</p>"},{"location":"APPs/gForceAppLegacy/","title":"gForceAPP for gForce100/gForcePro","text":"<p>gForceAPP for gForce100/gForcePro is an Android based to view armband gestures and quaternion. Click here to download.</p> <p>Note:</p> <p>For gForcePro+, we offer a new mobile app, see gForceAPP for gForcePro+ for more information.</p>"},{"location":"APPs/oym8CHWave/","title":"oym8CHWave","text":"<p>Open source EMG data manipulation tool for gForcePro/gForcePro+. Displays waveforms according to EMG data from gForcePro. Sends sound on/off bit flags to oym8CHWaveArduino if oym8CHWaveArduino is connected.</p>"},{"location":"APPs/oym8CHWave/#screenshots","title":"Screenshots","text":""},{"location":"APPs/oym8CHWave/#download","title":"Download","text":"<p>Download click here</p>"},{"location":"APPs/oym8CHWave/#source-code","title":"Source code","text":"<p>View source click here</p>"},{"location":"SDK/SDKList/","title":"SDK &amp; Sample List","text":""},{"location":"SDK/SDKList/#gforcesdk-c-for-windows","title":"gForceSDK C++ for Windows","text":"<p>gForceSDK C++ for Windows include gForce SDK dll files and some simple examples for C++.</p>"},{"location":"SDK/SDKList/#gforcesdk-csharp-for-windows","title":"gForceSDK CSharp for Windows","text":"<p>gForceSDK CSharp for Windows include gForce SDK dll files for CSharp.</p>"},{"location":"SDK/SDKList/#gforcesdk-python-for-linux-system-with-ble-support","title":"gForceSDK Python for Linux System with BLE support","text":"<p>gForceSDK Python for Linux is gForce SDK of python version under linux. Needs bluepy library to work. Recommend raspberry PI as running system.</p>"},{"location":"SDK/SDKList/#gforcesdk-python-for-windowslinux-system-with-ble-support","title":"gForceSDK Python for Windows/Linux System with BLE support","text":"<p>gForceSDK Python is gForce SDK of python version under linux. Contributed by Myelin-H.</p>"},{"location":"SDK/SDKList/#gforcesdk-for-unity","title":"gForceSDK for Unity","text":"<p>gforceu3d includes Unity3D example for using OYMotion devices, e.g., gForce200, gForcePro, gForceOct, gForceDual, gForceDuo, ORehabArm, ORehabLeg, etc.</p>"},{"location":"SDK/SDKList/#gforcesdk-for-arduino","title":"gForceSDK for Arduino","text":"<p>gForceSDK Arduino is for using gForce200/gForcePro/gForcePro+ and gForceJoint with Arduino and Arduino-compatible devices. It offers an easy way for Arduino-alike devices to connect to gForce Armband and read data such as gestures and quaternions from it.</p>"},{"location":"SDK/SDKList/#gforcesdk-for-embedded","title":"gForceSDK for Embedded","text":"<p>gForceSDK Embedded is for using gForce200/gForcePro/gForcePro+ and gForceJoint with embedded devices. It offers an easy way for embedded devices to connect to gForce Armband and read data such as gestures, quaternions and emg raw data from it.</p>"},{"location":"SDK/SDKList/#gforcesdkandroiddemo-for-android","title":"gForceSDKAndroidDemo for Android","text":"<p>gForceSDKAndroidDemo is for using gForce200/gForcePro/gForcePro+ in Android based systems.</p>"},{"location":"SDK/gForceSDK/","title":"gForce SDK Manual","text":""},{"location":"SDK/gForceSDK/#functions-to-get-data","title":"Functions to Get Data","text":"SDK Type Orientation Data Gesture Data Device Status Other Data* Data Config Function gForceCXX onOrientationData(...)** onGestureData(...)** onDeviceStatusChanged(...)** onExtendedDeviceData(...)** DeviceSetting::setDataNotifSwitch(...) gForceCSharp onOrientationData(...)** onGestureData(...)** onDeviceStatusChanged(...)** onExtendedDeviceData(...)** Device::setDataSwitch(...) gForcePython Callback of GF.startDataNotification(...) Callback of GF.startDataNotification(...) Callback of GF.startDataNotification(...) Callback of GF.startDataNotification(...) GF.setDataNotifSwitch(...) gForceArduino GForceAdapter::GetGForceData(...) GForceAdapter::GetGForceData(...) GForceAdapter::GetGForceData(...) GForceAdapter::GetGForceData(...)*** NA gForceEmbedded GForceAdapter::GetGForceData(...) GForceAdapter::GetGForceData(...) GForceAdapter::GetGForceData(...) GForceAdapter::GetGForceData(...)*** NA <p>Note:</p> <p>* : Includes 10 data types</p> <p>** : In subclass of HubListener</p> <p>*** : Only EMG data supported.</p>"},{"location":"SDK/gForceSDK/#data-format-in-callback","title":"Data Format in Callback","text":"<p>Callback will be invoked (e.g., <code>onExtendedDeviceData(...)</code> in subclass of HubListener or user callback of <code>GF.startDataNotification(...)</code>) when desired data notification comes.</p> <p>Data format:</p> Notification Data Type Data Packet Length First Byte Value Data Content* Comment Accelerator 13 0x01 (NTF_ACC_DATA) Accelerator_X(4 Byte long), Accelerator_Y, Accelerator_Z Accelerate speed of axis x,y and z in q15 format. Divide it by 65536.0f to get real float value. Gyroscope 13 0x02 (NTF_GYRO_DATA) Gyroscope_X(4 Byte long), Gyroscope_Y, Gyroscope_Z Gyro of axis x,y and z in q15 format. Divide it by 65536.0f to get real float value. Magnetometer 13 0x03 (NTF_MAG_DATA) Gyroscope_X(4 Byte long), Compass_Y, Compass_Z Magneto data of axis x,y and z in q15 format. Divide it by 65536.0f to get real float value. Euler Angle 13 0x04 (NTF_EULER_DATA) Pitch(4 Byte float), Roll, Yaw Euler angle data is in degree. Pitch and Yaw is in the range of [-180, 180], Roll is in the range of [-90, 90] Quaternion 17 0x05 (NTF_QUAT_FLOAT_DATA) Quaternion_W(4 Byte float), Quaternion_X, Quaternion_Y, Quaternion_Z Rotation Matrix 37 0x06 (NTF_ROTA_DATA) Rot[0][0], Rot[0][1], Rot[0][2], Rot[1][0],... 3*3 Rotation matrix of data type long, leading 3 4-bytes integer represent the first row of matrix and so on Gesture 3 0x07 (NTF_EMG_GEST_DATA) Gesture identify(1 Byte uint), Probability(1 Byte uint) Possibility is in the range of [0, 100] Raw EMG 129 0x08 (NTF_EMG_ADC_DATA) CH0,CH1...CH7, CH0,CH1...CH7, ... Packet length depends on config of EMG, default 129. If resolution set to 8, 1 byte represents data of 1 channel. 2 bytes for 1 channel incase of resolution=12. Mouse NA 0x09 (NTF_HID_MOUSE) NA Not currently supported Joystick NA 0x0A (NTF_HID_JOYSTICK) NA Not currently supported Device Status 2 0x0B (NTF_DEV_STATUS) bit0 is for Recenter status, bit1 is for USB insert, bit2 is for USB unplug, bit3 is for motionless status; bit4 - bit7 is reserved 1 Byte for new device status Log Message &gt;= 1 0x0C (NTF_LOG_DATA) log message string <p>* : Starts from second byte of data packet.</p>"},{"location":"SDK/gForceSDK/#examples-for-getting-data-from-gforce","title":"Examples For Getting Data from gForce","text":"<p>Get EMG raw data examples.</p> <p>Note: Only data related functions here, for complete example, refer to code in SDK list please.</p>"},{"location":"SDK/gForceSDK/#c","title":"C++","text":"<p>1. Implement <code>HubListener</code> interface</p> <pre><code>  class HubListenerImpl : public HubListener{...}\n</code></pre> <p>2. Config EMG Data</p> <p>Call <code>DeviceSetting::setEMGRawDataConfig(...)</code> to configure Emg. First parameter is sample Rate in Hz, second parameter is channel Mask, third parameter is package data length, fourth parameter is Adc resolution, Fifth parameter is callback function.</p> <p>3. Open Data Notification</p> <p>Call <code>DeviceSetting::setDataNotifySwitch(...)</code> to open EMG raw. Set first parameter as DeviceSetting::DNF_EMG_RAW</p> <p>4. Extract the data of EMG, etc.</p> <pre><code>void HubListenerImpl::onExtendedDeviceData(SPDEVICE device, DeviceDataType dataType, gfsPtr&lt;const vector&lt;GF_UINT8&gt;&gt; data) override\n{\n  auto ptr = data-&gt;data();\n\n  switch (dataType) {\n  case DeviceDataType::DDT_EMGRAW:\n      for (size_t i = 0; i &lt; data-&gt;size(); i++)\n      {\n        //for 8bpp mode\n        printf(\"Emg data [%d] = %u\\n\", i, *(reinterpret_cast&lt;const uint8_t*&gt;(ptr++)));\n\n        //for 12bpp mode\n        //   printf(\"Emg data [%d] = %u\\n\", i, *(reinterpret_cast&lt;const uint16_t*&gt;(ptr)));\n        //   ptr += 2;\n      }\n\n    break;\n\n  case DeviceDataType::DDT_GYROSCOPE:\n      //... extract gyroscope data form 'data'\n    break;\n\n  default:\n    break;\n  }\n}\n</code></pre>"},{"location":"SDK/gForceSDK/#python","title":"Python","text":"<pre><code>DATA_LEN = 128\n\ndef ondata(data):\n    if data[0] == NotifDataType['NTF_EMG_ADC_DATA'] and len(data) == DATA_LEN + 1:\n            # Data for EMG CH0~CHn repeatedly.\n            # Resolution set in setEmgRawDataConfig:\n            #   8: one byte for one channel\n            #   12: two bytes in LSB for one channel.\n            # eg. 8bpp mode, data[1] = channel[0], data[2] = channel[1], ... data[8] = channel[7]\n            #                data[9] = channel[0] and so on\n            # eg. 12bpp mode, {data[2], data[1]} = channel[0], {data[4], data[3]} = channel[1] and so on\n            for i in range(1, DATA_LEN):\n                print(data[i])\n\ndef set_cmd_cb(resp):\n    print('Command result: {}'.format(resp))\n\nGF = GForceProfile()\nGF.setEmgRawDataConfig(sampRate = 650, channelMask = 0xFF, dataLen = DATA_LEN, resolution = 8, cb = set_cmd_cb, timeout = 1000)\nGF.setDataNotifSwitch(DataNotifFlags['DNF_EMG_RAW'], set_cmd_cb, timeout = 1000)\nGF.startDataNotification(ondata)\n\nbutton = input()\n\nif len(button) != 0:\n    GF.stopDataNotification()\n    GF.setDataNotifSwitch(DataNotifFlags['DNF_OFF'], set_cmd_cb, timeout = 1000)\n</code></pre>"},{"location":"SDK/gForceSDK/#csharp","title":"CSharp","text":"<p>1. Inherit <code>HubListener</code> class and implement virtual functions.</p> <pre><code>  class Listener : HubListener{...}\n</code></pre> <p>2. Call Device::setEmgConfig(...) to configure EMG data</p> <pre><code>connectedDevice.setEmgConfig(650/*sampleRateHz*/, 0x00FF/*interestedChannels*/, 128/*packageDataLength*/, 8/*adcResolution*/, (Device dev, uint resp) =&gt;\n{\n  // Process the result\n});\n</code></pre> <p>3. Call Device::setDataSwitch(...) tp open EMG raw</p> <pre><code>connectedDevice.enableDataNotification(0); // Disable notification temporarily\n\nconnectedDevice.setDataSwitch((uint)DataNotifFlags.DNF_EMG_RAW/*and other data flags you want*/, (Device dev, uint resp) =&gt;\n{\n    System.Console.WriteLine(\"setDataSwitch, response : {0}\", (RetCode)resp);\n\n    if ((RetCode)resp == RetCode.GF_SUCCESS)\n    {\n        dev.enableDataNotification(1);  // Enable notification\n    }\n});\n</code></pre> <p>3. print the data of EMG raw</p> <pre><code>class Listener : HubListener\n{\n  public override void onExtendedDeviceData(Device device, Device.DataType type, byte[] data)\n  {\n    if (type == Device.DataType.Emgraw)\n    {\n        System.Console.Write(\"Emg data len: {0}, data:\" , data.Length);\n\n        var sb = new StringBuilder(\"{\");\n\n        foreach (var b in data)\n        {\n            sb.Append(b + \",\");\n        }\n\n        sb.Remove(sb.Length - 1, 1);\n        sb.Append(\"}\");\n\n        System.Console.WriteLine(sb.ToString());\n    }\n  }\n}\n</code></pre> <p>Note: Data transfers should be off when configuring data types and starting/stopping data notification.</p>"},{"location":"gForce200/gForce200UserGuide/","title":"gForce 200 Armband User Guide","text":"<p>Nov 16th, 2020</p>"},{"location":"gForce200/gForce200UserGuide/#overview","title":"Overview","text":"<p>gForce 200 Armband is a smart wearable Human Interface Device for gesture recognition. It recognizes gestures according to the sEMG signals of human forearms, and as well as calculates orientation data in quaternions or Euler Angles from its built-in 9-axis IMU.</p> <p>Comparing with the other gesture recognition devices that are based on the computer vision technology, gForce Armband has the advantage of no dependency of ambient light, no strictness with angle, much lower energy and much lower cost.</p> <p></p>"},{"location":"gForce200/gForce200UserGuide/#turning-onoff","title":"Turning on/off","text":"<ul> <li> <p>Turn on</p> <p>When gForce 200 Armband is off, its green LED light will be off. To turn it on, simply press and hold the button in the middle of its main block for about 1 second til the green LED is turned on.</p> <p>When gForce 200 Armband starts to power on, it will vibrate for about 0.2 second. Once it is successfully powered up, the green LED light flashes at a frequency of 1/4HZ with 2 seconds on and 2 seconds off.</p> <p>Make sure the armband has sufficient power, otherwise re-charge it with a micro USB line.</p> </li> <li> <p>Turn off</p> <p>When gForce 200 Armband is on, pressing and holding the button for about 5 seconds and then releasing will turn it off. The green LED being off indicates the device has been turned off successfully.</p> </li> </ul> <p>Note:</p> <p>If gForce 200 Armband is not in use, please turn it off. Right now the auto-low-power mode is not implemented yet.</p>"},{"location":"gForce200/gForce200UserGuide/#re-charging","title":"Re-charging","text":"<p>gForce 200 Armband is equipped with Li-ion battery (200mAh). The USB port on the main block is used for battery re-charging.</p> <p>During re-charging, the red light LED on the main block is on. Re-charging will maximally take 2 hours, and after re-charging completes, the red light LED is turned off.</p> <p>Note:</p> <p>gForce 200 Armband is NOT designed to work during re-charging, as this brings in electrical noise which contaminates the weak EMG biometric signals.</p>"},{"location":"gForce200/gForce200UserGuide/#other-status-indication","title":"Other Status Indication","text":"<ul> <li> <p>After successfully connecting with a BLE central device (e.g. gForceJoint,   gForceDongle or any other BLE central device), the green LED light flashes   at 5HZ when any data (e.g. quaternion, gesture or raw data) switch is on.</p> </li> <li> <p>The device will vibrate for about 200ms when a gesture is recognized.</p> </li> </ul>"},{"location":"gForce200/gForce200UserGuide/#instructions-to-wearing-and-performing-gestures","title":"Instructions to Wearing and Performing Gestures","text":"<p>To make sure gForce armband can recognize your gestures, please refer to Guide to Performing Gestures and spend several minutes learning and training yourself. The recognition rate can reach 95% and even higher after you get familiar with performing the gestures properly.</p>"},{"location":"gForce200/gForce200UserGuide/#imu","title":"IMU","text":"<p>When power on, the IMU directions are like this: </p> <p>But it will be reset when you press the multi-function button. You may view IMU data in gForce APP.</p>"},{"location":"gForce200/gForce200UserGuide/#predefined-gestures","title":"Predefined Gestures","text":"<p>The six predefined gestures are:</p> <ul> <li>Fist</li> <li>Spread Fingers</li> <li>Wave In</li> <li>Wave Out</li> <li>Pinch</li> <li>Shoot</li> </ul> <p>Note:</p> <p>When both your arm and hand are at a rest state, it will be recognized as a 'Relax' gesture.</p>"},{"location":"gForce200/gForce200UserGuide/#fetch-gesturequaternionimu-data","title":"Fetch Gesture/Quaternion/IMU Data","text":"<p>For data fetch, we offer SDK: Use gForceSDKCXX, gForceSDKCSharp, gForceSDKPython to fetch gesture/quaternion/IMU data, etc. See SDK list &amp; gForceSDK manual for help.</p>"},{"location":"gForce200/gForce200UserGuide/#user-guide","title":"User Guide","text":"<p>Click here for gForce200 user guide in PDF format.</p>"},{"location":"gForceJoint/gForceJoint/","title":"gForce Joint","text":"<p>August 28th, 2020</p>"},{"location":"gForceJoint/gForceJoint/#brief","title":"Brief","text":"<p>This document tries to guiding how one can use gForce gesture armband with Arduino. Before continuing, please make sure you have sufficient experience with Arduino, and ArduinoIDE was installed on your PC.</p> <ul> <li>What is Arduino</li> <li>How to install ArduinoIDE</li> <li>Learn Arduino</li> </ul>"},{"location":"gForceJoint/gForceJoint/#gforce-joint-usage","title":"gForce Joint Usage","text":"<p>This chapter guides the steps to connect gForce Joint to Arm band. The following names are being used: gForceJoint, gForce, gForceSDKArduino, ArduinoMEGA</p> <ul> <li>What is gForce200</li> <li>What is gForcePro/Pro+/Oct</li> <li>What is gForceSDKArduino</li> <li>What is ArduinoMEGA</li> </ul> <p></p>"},{"location":"gForceJoint/gForceJoint/#step-1-import-gforcesdkarduino","title":"Step 1: Import gForceSDKArduino","text":"<ul> <li>How to import gForceSDKArduino</li> </ul>"},{"location":"gForceJoint/gForceJoint/#step-2-test-communication-between-gforcejoint-and-arduinomega","title":"Step 2: Test communication between gForceJoint and ArduinoMEGA","text":"<ol> <li>Wire gForceJoint with ArduinoMEGA:  in this demo case, gForceJoint is connected to MEGA\u2019s Serial Port #2 (gForceJoint (TX) =&gt; MEGA (RX2))</li> <li>Open gForceJointTest in ArduinoIDE. Compile and upload to ArduinoMEGA.</li> <li>Open the Serial Port Monitor from ArduinoIDE.</li> <li>Set the serial port monitor with a baud rate of 115200bps.</li> <li>Pair and connect gForce armband to gForceJoint, perform the gestures that\u2019s defined, check if the information printed out in the Serial Port Monitor is correct, and hence make sure the connect between gForceJoint and MEGA works.</li> </ol>"},{"location":"gForceJoint/gForceJoint/#qa","title":"Q&amp;A","text":"<p>How to wear gForce armband?</p> <p>If a gForce-100/gForce-200 is used, users should follow wearing instruction and gesture strictly.</p> <p>How to connect gForce with gForceJoint wirelessly?</p> <ol> <li>Turn on gForce armband, the green led should flash slowly</li> <li>Make sure gForceJoint is powered on</li> <li>Put gForce armband close to gForceJoint such as within 10 cm of distance.</li> <li>gForce armband will automatically connect to gForceJoint. The green led should   flash much faster.</li> <li>If not, make sure gForceJoint is not connected to other gForce armband. Only one armband is allowed. And, make sure, power is on.</li> </ol> <p>Note: One should make sure gForceJoint works with ArduinoMEGA before continuing. Possible mistakes are:</p> <ul> <li>Wiring mistakes between gForceJoint and ArduinoMEAG</li> <li>gForce doesn\u2019t connect with gForceJoint because distance. When connecting, gForce armband and gForceJoint HAVE to be within a short distance as close as possible such as 10 cm.</li> <li>User doesn\u2019t follow armband wearing and gestures.</li> </ul>"},{"location":"gForcePro/gForcePro/","title":"gForcePro/gForcePro+ Armband and gForceOct Module User Guide","text":"<p>August 26th, 2021</p>"},{"location":"gForcePro/gForcePro/#overview","title":"Overview","text":"<p>gForcePro/gForcePro+ Armband or gForceOct module is a smart wearable Human Interface Device for gesture recognition. It recognizes gestures according to the sEMG signals of human forearms, and as well as calculates orientation data in quaternions or Euler Angles from its built-in 9-axis IMU.</p> <p>Comparing with the other gesture recognition devices that are based on the computer vision technology, gForce Armband has the advantage of no dependency of ambient light, no strictness with angle, much lower energy and much lower cost.</p> <p>gForcePro+</p> <p></p> <p>gForceOct</p> <p></p> <p>Note:</p> <p>gForcePro is discontinued. For new purchase orders, please choose gForcePro+.</p>"},{"location":"gForcePro/gForcePro/#turning-onoff","title":"Turning on/off","text":"<ul> <li> <p>Turn on</p> <p>When gForcePro/gForcePro+ or gForceOct module Armband is off, its green LED light will be off. To turn it on, simply press and hold the button in the middle of its main block for about 1 second til the green LED is turned on.</p> <p>When gForcePro/gForcePro+ Armband or gForceOct module starts to power on, it will vibrate for about 0.2 second. Once it is successfully powered up, the green LED light flashes at a frequency of 1/4HZ with 2 seconds on and 2 seconds off.</p> <p>Make sure the armband has sufficient power, otherwise re-charge it with a micro USB line.</p> </li> <li> <p>Turn off</p> <p>When gForcePro/gForcePro+ Armband or gForceOct module is on, pressing and holding the button for about 5 seconds and then releasing will turn it off. The green LED being off indicates the device has been turned off successfully.</p> </li> </ul> <p>Note:</p> <p>If gForcePro/gForcePro+ Armband or gForceOct module is not in use, please turn it off. Right now the auto-low-power mode is not implemented yet.</p>"},{"location":"gForcePro/gForcePro/#re-charging","title":"Re-charging","text":"<p>gForcePro/gForcePro+ Armband or gForceOct module is equipped with Li-ion battery (200mAh). The USB port on the main block is used for battery re-charging.</p> <p>During re-charging, the red light LED on the main block is on. Re-charging will maximally take 2 hours, and after re-charging completes, the red light LED is turned off.</p> <p>Note:</p> <p>gForcePro/gForcePro+ Armband or gForceOct module is NOT designed to work during re-charging, as this brings in electrical noise which contaminates the weak EMG biometric signals.</p>"},{"location":"gForcePro/gForcePro/#other-status-indication","title":"Other Status Indication","text":"<ul> <li> <p>After successfully connecting with a BLE central device (e.g. gForceJoint,   gForceDongle or any other BLE central device), the green LED light flashes   at 5HZ when any data (e.g. quaternion, gesture or raw data) switch is on.</p> </li> <li> <p>The device will vibrate for about 100ms when a gesture is recognized.</p> </li> </ul>"},{"location":"gForcePro/gForcePro/#imu","title":"IMU","text":"<p>When power on, the IMU directions are like this: </p> <p>But it will be reset when you press the multi-function button. You may view IMU data in gForce APP.</p>"},{"location":"gForcePro/gForcePro/#gesture-training","title":"Gesture Training","text":"<ul> <li> <p>gForcePro</p> <p>gForcePro supports user gesture training with help of OTrain desktop APP. Refer to OTrain for more details.</p> </li> <li> <p>gForcePro+/gForceOct</p> <p>gForcePro+/gForceOct uses gForce APP to train user gestures. Refer to gForce APP for more details.</p> </li> </ul>"},{"location":"gForcePro/gForcePro/#fetch-emgquaternion-data","title":"Fetch EMG/Quaternion/... Data","text":"<p>For data fetch, we offer SDK and ready to use terminal:</p> <ul> <li> <p>Via SDK</p> <p>Use gForceSDKCXX, gForceSDKCSharp, gForceSDKPython to fetch EMG data, etc. See SDK list &amp; gForceSDK manual for help.</p> </li> <li> <p>Via oym8CHWave</p> <p>Refer to oym8CHWave for more details.</p> </li> </ul>"},{"location":"gForcePro/gForcePro/#user-guide","title":"User Guide","text":"<p>Click here for gForcePro+/gForceOct user guide in PDF format.</p>"}]}