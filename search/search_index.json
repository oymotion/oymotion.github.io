{
    "docs": [
        {
            "location": "/",
            "text": "gForce Armband\n\n\ngForce 100 Armband is a smart wearable \nHuman Interface Device\n for\n\ngesture recognition\n. It recognizes gestures according\nto the sEMG signals of human forearms, and as well as calculates orientation\ndata in quaternions or \nEuler Angles\n from its built-in 6-axis\n\nIMU\n and tri-axis \nmagnetometer\n.\n\n\nDocuments\n\n\n\n\ngForce 100 Manual\n &\n  \ngForce 100 User Guide\n\n\n\n\nThe User Guide provides more detailed information than the Manual.\n\n\n\n\ngForce 100 Embedded Suite User Guide\n\n\n\n\nProvides guide of using gForce 100 in embedded devices such as robots and\n  prosthetics.\n\n\n\n\ngForce Data Protocol\n\n\n\n\nThe specification of gForce Data Protocol defines the details of gForce\n  interacting with host computers of PC, AR and VR.\n\n\n\n\ngForce EMG Raw Data\n\n\n\n\nProvides more information about using EMG raw data.\n\n\nOpen Source Software\n\n\n\n\ngForce SDK for Arduino\n\n\n\n\nThe open source library with example code to illustrate how to connnect\n  gForce to Arduino-alike devices.\n\n\n\n\ngForce Data Protocol Sample\n\n\n\n\nAn open source simple example developed for Android to illustrate\n  \ngForce Data Protocol\n.\n\n\n\n\ngForce SDK\n\n\n\n\nThe SDK for Windows and Android with Unity support. \n\n  Internal testing, coming soon......\n\n\n\n\ngForceApp\n\n\n\n\nThe \nhub\n application for other applications to interact with\n  gForce. It also provides utilities for users setting, firmware upgrading and\n  diagnosing gForce. Released APK is open for downloading.\n  Internal testing, coming soon......\n\n\nDownloads\n\n\n\n\n\n\ngForceApp for Android  gForceApp_v2.3.4-20171009.apk\n\n\nPre-built releases of gForceApp for Android.\n\n\n\n\n\n\nsEMG Raw Data Capture Utility\n\n\nOnly for gForce 100 with support for raw data capturing.\n\n\n\n\n\n\nsEMG Raw Data Capture SDK\n\n\nOnly for gForce 100 with support for raw data capturing.\n\n\n\n\n\n\nExamples\n\n\n\n\ngForce Examples\n\n\n\n\nThe collection of gForce Armband application examples, like controlling a mechanical hand.\n\n\n\n\ngForce Neuron\n\n\nDocuments\n\n\n\n\ngForce Neuron User Guide\n\n\n\n\nOpen Source Software\n\n\n\n\nsEMG Filters Library\n\n\n\n\nProvides some basic filter functions for sEMG digital signals.\n\n\nVideo tutorials\n\n\n\n\nHow to make standard gesture\n\n\nHow to assemble gForce\n\n\nHow to use gForce",
            "title": "Home"
        },
        {
            "location": "/#gforce-armband",
            "text": "gForce 100 Armband is a smart wearable  Human Interface Device  for gesture recognition . It recognizes gestures according\nto the sEMG signals of human forearms, and as well as calculates orientation\ndata in quaternions or  Euler Angles  from its built-in 6-axis IMU  and tri-axis  magnetometer .",
            "title": "gForce Armband"
        },
        {
            "location": "/#documents",
            "text": "gForce 100 Manual  &\n   gForce 100 User Guide   The User Guide provides more detailed information than the Manual.   gForce 100 Embedded Suite User Guide   Provides guide of using gForce 100 in embedded devices such as robots and\n  prosthetics.   gForce Data Protocol   The specification of gForce Data Protocol defines the details of gForce\n  interacting with host computers of PC, AR and VR.   gForce EMG Raw Data   Provides more information about using EMG raw data.",
            "title": "Documents"
        },
        {
            "location": "/#open-source-software",
            "text": "gForce SDK for Arduino   The open source library with example code to illustrate how to connnect\n  gForce to Arduino-alike devices.   gForce Data Protocol Sample   An open source simple example developed for Android to illustrate\n   gForce Data Protocol .   gForce SDK   The SDK for Windows and Android with Unity support.  \n  Internal testing, coming soon......   gForceApp   The  hub  application for other applications to interact with\n  gForce. It also provides utilities for users setting, firmware upgrading and\n  diagnosing gForce. Released APK is open for downloading.\n  Internal testing, coming soon......",
            "title": "Open Source Software"
        },
        {
            "location": "/#downloads",
            "text": "gForceApp for Android  gForceApp_v2.3.4-20171009.apk  Pre-built releases of gForceApp for Android.    sEMG Raw Data Capture Utility  Only for gForce 100 with support for raw data capturing.    sEMG Raw Data Capture SDK  Only for gForce 100 with support for raw data capturing.",
            "title": "Downloads"
        },
        {
            "location": "/#examples",
            "text": "gForce Examples   The collection of gForce Armband application examples, like controlling a mechanical hand.",
            "title": "Examples"
        },
        {
            "location": "/#gforce-neuron",
            "text": "",
            "title": "gForce Neuron"
        },
        {
            "location": "/#documents_1",
            "text": "gForce Neuron User Guide",
            "title": "Documents"
        },
        {
            "location": "/#open-source-software_1",
            "text": "sEMG Filters Library   Provides some basic filter functions for sEMG digital signals.",
            "title": "Open Source Software"
        },
        {
            "location": "/#video-tutorials",
            "text": "How to make standard gesture  How to assemble gForce  How to use gForce",
            "title": "Video tutorials"
        },
        {
            "location": "/gForce100/gForce100UserGuide/",
            "text": "gForce 100 Armband User Guide\n\n\nJuly 6th, 2017\n\n\nOverview\n\n\ngForce 100 Armband is a smart wearable \nHuman Interface Device\n for\n\ngesture recognition\n. It recognizes gestures according\nto the sEMG signals of human forearms, and as well as calculates orientation\ndata in quaternions or \nEuler Angles\n from its built-in 9-axis\n\nIMU\n.\n\n\nComparing with the other gesture recognition devices that are based on\nthe computer vision technology, gForce Armband has the advantage of no\ndependency of embient light, no strictness with angle, much lower energy\nand much lower cost.\n\n\n\n\nTurning on/off\n\n\n\n\n\n\nTurn on\n\n\nWhen gForce 100 Armband is off, its green LED light will be off. To turn\nit on, simply press the button in the middle of its main block.\n\n\nWhen gForce 100 Armband starts to power on, it will vibrate for about 0.5\nsecond. Once it is successfully powered up, the green LED light flashes\nat a frequency of 4HZ with 2 seconds on and 2 seconds off.\n\n\nMake sure the armband has sufficient power, otherwise re-charge it with\na micro USB line.\n\n\n\n\n\n\nTurn off\n\n\nWhen gForce 100 Armband is on, pressing and holding the button for about 5\nseconds and then releasing will turn it off. The green LED being off\nindicates the device has been turned off successfully.\n\n\n\n\n\n\nNote\n:\n\n\n\n\nIf gForce 100 Armband is not in use, please turn it off. Right now the\nauto-low-power mode is not implemented yet.\n\n\n\n\nRe-charging\n\n\ngForce 100 Armband is equipped with Li-ion battery (200mAh). The USB port on\nthe main block is used for battery re-charging.\n\n\nDuring re-charging, the red light LED on the main block is on. Re-charging will\nmaximally take 2 hours, and after re-charging completes, the red light LED is\nturned off.\n\n\nNote\n:\n\n\n\n\ngForce 100 Armband is NOT designed to work during re-charging, as this brings in\nelectrical noise which contaminates the weak EMG biometric signals.\n\n\n\n\nOther Status Indication\n\n\n\n\n\n\nAfter successfully connecting with a BLE central device (e.g. gForceJoint,\n  gForceDongle or any other BLE central device), the green LED light flashes\n  at 5HZ when any data (e.g. quaternion, gesture or raw data) switch is on.\n  If the user turns all data switches off through \ngForceApp\n, the\n  green LED light will be always on.\n\n\n\n\n\n\nThe device will vibrate for about 100ms when a gesture is recognized.\n\n\n\n\n\n\nInstructions to Wearing and Performing Gestures\n\n\nTo make sure gForce armband can recognize your gestures, please refer to\n\nGuide to Performing Gestures\n and spend several minutes\nlearning and training yourself. The recognition rate can reach 95% and even higher\nafter you get familiar with performing the gestures properly.\n\n\nPredefined Gestures\n\n\nThe six predefined gestures are:\n\n \nFist\n\n\n \nSpread Fingers\n\n\n \nWave In\n\n\n \nWave Out\n\n\n \nPinch\n\n\n \nShoot\n\n\nNote:\n\n\n\n\nWhen both your arm and hand are at a rest state, it will be recognized as a\n'\nRelax\n' gesture.",
            "title": "gForce100"
        },
        {
            "location": "/gForce100/gForce100UserGuide/#gforce-100-armband-user-guide",
            "text": "July 6th, 2017",
            "title": "gForce 100 Armband User Guide"
        },
        {
            "location": "/gForce100/gForce100UserGuide/#overview",
            "text": "gForce 100 Armband is a smart wearable  Human Interface Device  for gesture recognition . It recognizes gestures according\nto the sEMG signals of human forearms, and as well as calculates orientation\ndata in quaternions or  Euler Angles  from its built-in 9-axis IMU .  Comparing with the other gesture recognition devices that are based on\nthe computer vision technology, gForce Armband has the advantage of no\ndependency of embient light, no strictness with angle, much lower energy\nand much lower cost.",
            "title": "Overview"
        },
        {
            "location": "/gForce100/gForce100UserGuide/#turning-onoff",
            "text": "Turn on  When gForce 100 Armband is off, its green LED light will be off. To turn\nit on, simply press the button in the middle of its main block.  When gForce 100 Armband starts to power on, it will vibrate for about 0.5\nsecond. Once it is successfully powered up, the green LED light flashes\nat a frequency of 4HZ with 2 seconds on and 2 seconds off.  Make sure the armband has sufficient power, otherwise re-charge it with\na micro USB line.    Turn off  When gForce 100 Armband is on, pressing and holding the button for about 5\nseconds and then releasing will turn it off. The green LED being off\nindicates the device has been turned off successfully.    Note :   If gForce 100 Armband is not in use, please turn it off. Right now the\nauto-low-power mode is not implemented yet.",
            "title": "Turning on/off"
        },
        {
            "location": "/gForce100/gForce100UserGuide/#re-charging",
            "text": "gForce 100 Armband is equipped with Li-ion battery (200mAh). The USB port on\nthe main block is used for battery re-charging.  During re-charging, the red light LED on the main block is on. Re-charging will\nmaximally take 2 hours, and after re-charging completes, the red light LED is\nturned off.  Note :   gForce 100 Armband is NOT designed to work during re-charging, as this brings in\nelectrical noise which contaminates the weak EMG biometric signals.",
            "title": "Re-charging"
        },
        {
            "location": "/gForce100/gForce100UserGuide/#other-status-indication",
            "text": "After successfully connecting with a BLE central device (e.g. gForceJoint,\n  gForceDongle or any other BLE central device), the green LED light flashes\n  at 5HZ when any data (e.g. quaternion, gesture or raw data) switch is on.\n  If the user turns all data switches off through  gForceApp , the\n  green LED light will be always on.    The device will vibrate for about 100ms when a gesture is recognized.",
            "title": "Other Status Indication"
        },
        {
            "location": "/gForce100/gForce100UserGuide/#instructions-to-wearing-and-performing-gestures",
            "text": "To make sure gForce armband can recognize your gestures, please refer to Guide to Performing Gestures  and spend several minutes\nlearning and training yourself. The recognition rate can reach 95% and even higher\nafter you get familiar with performing the gestures properly.",
            "title": "Instructions to Wearing and Performing Gestures"
        },
        {
            "location": "/gForce100/gForce100UserGuide/#predefined-gestures",
            "text": "The six predefined gestures are:   Fist    Spread Fingers    Wave In    Wave Out    Pinch    Shoot  Note:   When both your arm and hand are at a rest state, it will be recognized as a\n' Relax ' gesture.",
            "title": "Predefined Gestures"
        },
        {
            "location": "/gForceEmbeddedSuit/gForce100EmbeddedSuiteUserGuide/",
            "text": "gForce 100 Embedded Suite User Guide\n\n\nJuly 4th, 2017\n\n\nOverview\n\n\nThis user guide is intended to help developers to understand how to adopt\ngForce 100 Embedded Suite to add gesture and forearm orientation control\nto their embedded design.\n\n\ngForce 100 Embedded Suite includes one\nand one gForceJoint module.\n\n\n\n\ngForce 100 Armband\n\n\n\n\nA \nBLE Peripheral\n that sends out recognized gestures and\n  orientation in quaternions over BLE.\n\n\n\n\ngForceJoint\n\n\n\n\nA \nBLE Central\n that finds, pairs and connects with the gForce\n  Armband, and then parses and forwards the data thru a UART interface.\n\n\ngForceJoint acts as a bridge between the gForce 100 Armband and target system\n  to control.\n\n\n\n\nDevelopers can wire the gForceJoint to the UART inteface of the target control\nsystem (e.g an Arduino board, or an Raspberry Pi) so that the target control\nsystem can be controled by the gForce 100 Armband.\n\n\n\n\nConnecting gForce with gForceJoint\n\n\nTo make things easier, gForceJoint is designed to automatically find, pair\nand connect with the first gForce Armband with a strong Bluetooth signal (RSSI)\nlevel above a preset threshold. In general, it would be the closest gForce\nArmband that has the highest RSSI. Therefore, after powering on gForce 100\narmband and gForceJoint, put the gForce 100 Armband as close to the gForceJoint\nas within 5 cm. Successful connection turns the green LED on the gForce Armband\nto flash at a relatively high frequency.\n\n\nTo disconnect, simply \nturn off the gForce 100 Armand\n.\n\n\nConnecting gForceJoint with Target Control System\n\n\ngForceJoint provides GPIO and UART to interface with target control system.\nHowever, UART is recommended.\n\n\nThe following figure shows the IOs of gForceJoint.\n\n\n\n\nVCC is the power supply to the gForceJoint board. gForceJoint is designed to\nsupport 3.3V or 5V power supply.\n\n\n\n\nWhen 5V is used, the jumper should be put to connect 'A2' and 'O1'.\n\n\nWhen 3.3V is used, the jumper should be put to connect 'A1' and 'O1'\n\n\n\n\nThe UART interface has the VCC/GND/TX/RX pins. The TX/RX is named from the\nperspective of gForceJoint board.\n\n\nRelationship between LED Indicators And Gestures\n\n\ngForceJoint has six LED lights to indicate recognized gestures.\n\n\n\n\nNote: The \nPower LED\n will be on when the gForceJoint is powered on, otherwise off.\n\n\nThe following table shows the relationship between LED1...6 and gestures:  \n\n\n\n\n\n\n\n\n~\n\n\nFist\n\n\nSpread Fingers\n\n\nWave-In\n\n\nWave-Out\n\n\nPinch\n\n\nShoot\n\n\nRelax\n\n\nUnknown gesture\n\n\n\n\n\n\n\n\n\n\nLED1\n\n\nOn\n\n\nOff\n\n\nOff\n\n\nOff\n\n\nOff\n\n\nOff\n\n\nOff\n\n\nOff\n\n\n\n\n\n\nLED2\n\n\nOff\n\n\nOn\n\n\nOff\n\n\nOff\n\n\nOff\n\n\nOff\n\n\nOff\n\n\nOff\n\n\n\n\n\n\nLED3\n\n\nOff\n\n\nOff\n\n\nOn\n\n\nOff\n\n\nOff\n\n\nOff\n\n\nOff\n\n\nOff\n\n\n\n\n\n\nLED4\n\n\nOff\n\n\nOff\n\n\nOff\n\n\nOn\n\n\nOff\n\n\nOff\n\n\nOff\n\n\nOff\n\n\n\n\n\n\nLED5\n\n\nOff\n\n\nOff\n\n\nOff\n\n\nOff\n\n\nOn\n\n\nOff\n\n\nOff\n\n\nOff\n\n\n\n\n\n\nLED6\n\n\nOff\n\n\nOff\n\n\nOff\n\n\nOff\n\n\nOff\n\n\nOn\n\n\nOff\n\n\nOff\n\n\n\n\n\n\n\n\ngForceJoint UART Data Protocol\n\n\ngForceJoint UART adopts a data protocol similar to TLV (type-length-value).\n\n\ngForceJoint UART consists of two types of data transfers:\n\n\n\n\nCommand: data from the Target Control System to gForceJoint.\n\n\nEvent: data from gForceJoint to Target Control System.\n\n\n\n\nRight now, only Event is supported. (one-way)\n\n\nSerial Port Setting\n\n\nThe following tables shows the serial port parameters used by gForceJoint:\n\n\n\n\n\n\n\n\nBaudrate\n\n\nData Bits\n\n\nParity\n\n\nStop Bits\n\n\nFlow Type\n\n\n\n\n\n\n\n\n\n\n115200bps\n\n\n8bit\n\n\nNone\n\n\n1bit\n\n\nNone\n\n\n\n\n\n\n\n\nEvent Format\n\n\n\n\n\n\n\n\nByte[0:1]\n\n\nByte[2]Bit[0:6]\n\n\nByte[2]Bit[7]\n\n\nByte[3]\n\n\nByte[4:]\n\n\n\n\n\n\n\n\n\n\nMagic Number\n\n\nEvent type\n\n\nPackageID Flag\n\n\nLength\n\n\nEvent Payload\n\n\n\n\n\n\n\n\n\n\n\n\nMagic Number\n:  0xAAFF\n\n\n\n\n\n\nEvent Type\n   \n\n\n\n\n\n\n\n\n\n\n\n\nEvent type\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0x02\n\n\nQuaternion (float)\n\n\n\n\n\n\n0x0F\n\n\nGesture\n\n\n\n\n\n\n0x14\n\n\ngForce Armband Status Notify\n\n\n\n\n\n\n0x70\n\n\ngForce Armband Connected\n\n\n\n\n\n\n0x71\n\n\ngForce Armband Disconnected\n\n\n\n\n\n\n\n\n\n\n\n\nPackageID Flag:\n Indicates if the \nEvent Payload\n has \nPackage ID\n. \n\n\nif PackageID == 1:\n      Byte[4] = Package ID\n      Byte[5:]= Event Data\n  else\n      Byte[4:]= Event Data\n\n\n\n\n\n\nLength:\n Indicates the total bytes of the following Byte[4:]\n\n\n\n\n\n\nPackage ID:\n Only applicable if \nPackageID Flag\n == 1. A one-byte timestamp to the \nEvent\n. This ID can be used to check if there are packets lost (timestamps are successive, if not, there is certain packet lost due to such like poor BLE connection).\n\n\n\n\n\n\nEvent Data:\n The content of \nEvent Data\n depend on \nEvent Type\n, it can be gestures or quaternion array.\n\n\n\n\n\n\nQuaternion\n\n\n\n\n\n\n\n\nByte[0-3]\n\n\nByte[4-7]\n\n\nByte[8-11]\n\n\nByte[12-15]\n\n\n\n\n\n\n\n\n\n\nW\n\n\nX\n\n\nY\n\n\nZ\n\n\n\n\n\n\n\n\n\n\n\n\nGesture\n\n\n\n\n\n\n\n\nByte[0]\n\n\nGesture\n\n\n\n\n\n\n\n\n\n\n0x00\n\n\nRelax\n\n\n\n\n\n\n0x01\n\n\nFist\n\n\n\n\n\n\n0x02\n\n\nSpread Fingers\n\n\n\n\n\n\n0x03\n\n\nWave-In\n\n\n\n\n\n\n0x04\n\n\nWave-Out\n\n\n\n\n\n\n0x05\n\n\nPinch\n\n\n\n\n\n\n0x06\n\n\nShoot\n\n\n\n\n\n\n0xFF\n\n\nUnknown Gesture\n\n\n\n\n\n\n\n\n\n\n\n\ngForce Armband Status Notify\n\n\nNotify is used to report that gForce 100 Armband has some status changes\n  that need to report to the Target Control System. Notify is one-byte.\n\n\n\n\n\n\n\n\n\n\nValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nBit0\n\n\n1\n\n\nRe-center\n\n\n\n\n\n\n\n\nRe-center is used to align the original coordinate system of gForce\n  Armband with what the user is facing in such like the VR glasses.\n  When gForce Armband is powered up from being off, the default original\n  coordinate is based on the geomagnetic field with pointing the USB port\n  to earth north and the main block parallel to ground will have a\n  quaternion [w=1, x=0, y=0, z=0]. The User can set the current orientation\n  to the original coordinate system [w=1, x=0, y=0, z=0] by pressing on\n  the button on the gForce Armband.\n\n\n\n\n\n\ngForce Armband Connected\n\n\n\n\n\n\n\n\nByte[0:5]\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n~\n\n\nThe Bluetooth MAC address of the gForce Armband connected\n\n\n\n\n\n\n\n\n\n\n\n\ngForce Armband Disconnected\n\n\n\n\n\n\n\n\nByte[0:5]\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n~\n\n\nThe Bluetooth MAC address of the gForce Armband disconnected\n\n\n\n\n\n\n\n\n\n\n\n\nExamples\n\n\nUnderstanding The Event Format\n\n\nThe following examples help developers to understand \nEvent\n format.\n\n\nWhen the \nPackageID Flag\n equals 0 or 1, the \nEvent Data\n to send is 0x01\n(Gesture Fist, value = 0x01), the data packet is explained in the following\nfigure:\n\n\n\n\n\n\n\n\n\n\nMagic Number\n\n\nEvent\n\n\nLength\n\n\nData\n\n\n\n\n\n\n\n\n\n\n\n\nByte[0:1]\n\n\nByte[2]\n\n\nByte[3]\n\n\nByte[4:N]\n\n\n\n\n\n\nPackageFlag Id == 1\n\n\n0xFF 0xAA\n\n\n0x8F\n\n\n0x02\n\n\nByte[4]=Package ID(0x00~0xFF),Byte[5]=gForce Data = 0x01\n\n\n\n\n\n\nPackageFlag Id == 0\n\n\n0xFF 0xAA\n\n\n0x0F\n\n\n0x01\n\n\nByte[4]=gForce Data=0x01\n\n\n\n\n\n\n\n\nArduino Example\n\n\ngForce SDK for Arduino\n is a tiny library with sample code\nfor developers to use gForce 100 Embedded Suite.",
            "title": "gForce Embedded Suit"
        },
        {
            "location": "/gForceEmbeddedSuit/gForce100EmbeddedSuiteUserGuide/#gforce-100-embedded-suite-user-guide",
            "text": "July 4th, 2017",
            "title": "gForce 100 Embedded Suite User Guide"
        },
        {
            "location": "/gForceEmbeddedSuit/gForce100EmbeddedSuiteUserGuide/#overview",
            "text": "This user guide is intended to help developers to understand how to adopt\ngForce 100 Embedded Suite to add gesture and forearm orientation control\nto their embedded design.  gForce 100 Embedded Suite includes one\nand one gForceJoint module.   gForce 100 Armband   A  BLE Peripheral  that sends out recognized gestures and\n  orientation in quaternions over BLE.   gForceJoint   A  BLE Central  that finds, pairs and connects with the gForce\n  Armband, and then parses and forwards the data thru a UART interface.  gForceJoint acts as a bridge between the gForce 100 Armband and target system\n  to control.   Developers can wire the gForceJoint to the UART inteface of the target control\nsystem (e.g an Arduino board, or an Raspberry Pi) so that the target control\nsystem can be controled by the gForce 100 Armband.",
            "title": "Overview"
        },
        {
            "location": "/gForceEmbeddedSuit/gForce100EmbeddedSuiteUserGuide/#connecting-gforce-with-gforcejoint",
            "text": "To make things easier, gForceJoint is designed to automatically find, pair\nand connect with the first gForce Armband with a strong Bluetooth signal (RSSI)\nlevel above a preset threshold. In general, it would be the closest gForce\nArmband that has the highest RSSI. Therefore, after powering on gForce 100\narmband and gForceJoint, put the gForce 100 Armband as close to the gForceJoint\nas within 5 cm. Successful connection turns the green LED on the gForce Armband\nto flash at a relatively high frequency.  To disconnect, simply  turn off the gForce 100 Armand .",
            "title": "Connecting gForce with gForceJoint"
        },
        {
            "location": "/gForceEmbeddedSuit/gForce100EmbeddedSuiteUserGuide/#connecting-gforcejoint-with-target-control-system",
            "text": "gForceJoint provides GPIO and UART to interface with target control system.\nHowever, UART is recommended.  The following figure shows the IOs of gForceJoint.   VCC is the power supply to the gForceJoint board. gForceJoint is designed to\nsupport 3.3V or 5V power supply.   When 5V is used, the jumper should be put to connect 'A2' and 'O1'.  When 3.3V is used, the jumper should be put to connect 'A1' and 'O1'   The UART interface has the VCC/GND/TX/RX pins. The TX/RX is named from the\nperspective of gForceJoint board.",
            "title": "Connecting gForceJoint with Target Control System"
        },
        {
            "location": "/gForceEmbeddedSuit/gForce100EmbeddedSuiteUserGuide/#relationship-between-led-indicators-and-gestures",
            "text": "gForceJoint has six LED lights to indicate recognized gestures.   Note: The  Power LED  will be on when the gForceJoint is powered on, otherwise off.  The following table shows the relationship between LED1...6 and gestures:       ~  Fist  Spread Fingers  Wave-In  Wave-Out  Pinch  Shoot  Relax  Unknown gesture      LED1  On  Off  Off  Off  Off  Off  Off  Off    LED2  Off  On  Off  Off  Off  Off  Off  Off    LED3  Off  Off  On  Off  Off  Off  Off  Off    LED4  Off  Off  Off  On  Off  Off  Off  Off    LED5  Off  Off  Off  Off  On  Off  Off  Off    LED6  Off  Off  Off  Off  Off  On  Off  Off",
            "title": "Relationship between LED Indicators And Gestures"
        },
        {
            "location": "/gForceEmbeddedSuit/gForce100EmbeddedSuiteUserGuide/#gforcejoint-uart-data-protocol",
            "text": "gForceJoint UART adopts a data protocol similar to TLV (type-length-value).  gForceJoint UART consists of two types of data transfers:   Command: data from the Target Control System to gForceJoint.  Event: data from gForceJoint to Target Control System.   Right now, only Event is supported. (one-way)",
            "title": "gForceJoint UART Data Protocol"
        },
        {
            "location": "/gForceEmbeddedSuit/gForce100EmbeddedSuiteUserGuide/#serial-port-setting",
            "text": "The following tables shows the serial port parameters used by gForceJoint:     Baudrate  Data Bits  Parity  Stop Bits  Flow Type      115200bps  8bit  None  1bit  None",
            "title": "Serial Port Setting"
        },
        {
            "location": "/gForceEmbeddedSuit/gForce100EmbeddedSuiteUserGuide/#event-format",
            "text": "Byte[0:1]  Byte[2]Bit[0:6]  Byte[2]Bit[7]  Byte[3]  Byte[4:]      Magic Number  Event type  PackageID Flag  Length  Event Payload       Magic Number :  0xAAFF    Event Type           Event type  Description      0x02  Quaternion (float)    0x0F  Gesture    0x14  gForce Armband Status Notify    0x70  gForce Armband Connected    0x71  gForce Armband Disconnected       PackageID Flag:  Indicates if the  Event Payload  has  Package ID .   if PackageID == 1:\n      Byte[4] = Package ID\n      Byte[5:]= Event Data\n  else\n      Byte[4:]= Event Data    Length:  Indicates the total bytes of the following Byte[4:]    Package ID:  Only applicable if  PackageID Flag  == 1. A one-byte timestamp to the  Event . This ID can be used to check if there are packets lost (timestamps are successive, if not, there is certain packet lost due to such like poor BLE connection).    Event Data:  The content of  Event Data  depend on  Event Type , it can be gestures or quaternion array.    Quaternion     Byte[0-3]  Byte[4-7]  Byte[8-11]  Byte[12-15]      W  X  Y  Z       Gesture     Byte[0]  Gesture      0x00  Relax    0x01  Fist    0x02  Spread Fingers    0x03  Wave-In    0x04  Wave-Out    0x05  Pinch    0x06  Shoot    0xFF  Unknown Gesture       gForce Armband Status Notify  Notify is used to report that gForce 100 Armband has some status changes\n  that need to report to the Target Control System. Notify is one-byte.      Value  Description      Bit0  1  Re-center     Re-center is used to align the original coordinate system of gForce\n  Armband with what the user is facing in such like the VR glasses.\n  When gForce Armband is powered up from being off, the default original\n  coordinate is based on the geomagnetic field with pointing the USB port\n  to earth north and the main block parallel to ground will have a\n  quaternion [w=1, x=0, y=0, z=0]. The User can set the current orientation\n  to the original coordinate system [w=1, x=0, y=0, z=0] by pressing on\n  the button on the gForce Armband.    gForce Armband Connected     Byte[0:5]  Description      ~  The Bluetooth MAC address of the gForce Armband connected       gForce Armband Disconnected     Byte[0:5]  Description      ~  The Bluetooth MAC address of the gForce Armband disconnected",
            "title": "Event Format"
        },
        {
            "location": "/gForceEmbeddedSuit/gForce100EmbeddedSuiteUserGuide/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/gForceEmbeddedSuit/gForce100EmbeddedSuiteUserGuide/#understanding-the-event-format",
            "text": "The following examples help developers to understand  Event  format.  When the  PackageID Flag  equals 0 or 1, the  Event Data  to send is 0x01\n(Gesture Fist, value = 0x01), the data packet is explained in the following\nfigure:      Magic Number  Event  Length  Data       Byte[0:1]  Byte[2]  Byte[3]  Byte[4:N]    PackageFlag Id == 1  0xFF 0xAA  0x8F  0x02  Byte[4]=Package ID(0x00~0xFF),Byte[5]=gForce Data = 0x01    PackageFlag Id == 0  0xFF 0xAA  0x0F  0x01  Byte[4]=gForce Data=0x01",
            "title": "Understanding The Event Format"
        },
        {
            "location": "/gForceEmbeddedSuit/gForce100EmbeddedSuiteUserGuide/#arduino-example",
            "text": "gForce SDK for Arduino  is a tiny library with sample code\nfor developers to use gForce 100 Embedded Suite.",
            "title": "Arduino Example"
        },
        {
            "location": "/gForceEMGRawData/gForceEMGRawData/",
            "text": "gForce sEMG Raw Data\n\n\nJune 22th, 2017\n\n\nSome versions of gForce provides users with the ability of capturing sEMG raw\ndata with the \nsEMG Raw Data Capture Utility\n\nor \nsEMG Raw Data Capture SDK\n.\n\n\nsEMG raw data is usually used in medical researching or for the developers\nthat want to build their own gesture recognition algorithm.\n\n\nIf you need such a special version of gForce, please query info@oymotion.com.\n\n\nData Format\n\n\nThe sEMG raw data, which is captured either into files by the sEMG Raw Data \nCapture Utility or by developer's own application built upon the sEMG Raw Data \nSDK, consists of a series of 140-byte packages, each of which consists of\n2-byte (0x8192) magic number, 1-byte CRC, 1-byte package id,  128-byte of 16 \ngroups of 8-channel interleaved sample data and 8-byte time-stamp.\n\n\nMore about 8-Channel Sample Data\n\n\nIt is 1 byte per channel per sample, and the output votage is 0-2.5v, and\namplifier is 800x, therefore, the input vatage of the orignal sEMG is:\n\n\n$$\\mathcal{In} = 1.25 \\frac{(\\mathcal{Out}-128)}{128 \\times 800}$$                           \n\n\nPlotting in Matlab\n\n\nThe following are a bunch of commands to read captured raw data file \n\nrawdata.hex\n and plot the channel 0 in Matlab:\n\n\n>> fp=fopen('rawdata.hex', 'r', 'l');\n>> file_data=fread(fp,'uchar','l');\n>> data=[];\n>> for i=1:140:length(file_data) \n>>     data=[data file_data([i+4:i+131])]; \n>> end\n>> data_2d=reshape(data, 8, []);\n>> figure;\n>> plot(data_2d(1,:));\n\n\n\n\nIt must be noted that Matlab uses 1-based array index!\n\n\nYou will be able to see the plotted figure like the following:\n\n\n\n\nIf you want to plot channel 7 instead, just replace the last command with:\n\n\n>> plot(data_2d(8,:));\n\n\n\n\nFilter for sEMG\n\n\n\n\nsEMG Filters Library\n Provides some basic filter functions for sEMG digital signals.",
            "title": "gForceEMG"
        },
        {
            "location": "/gForceEMGRawData/gForceEMGRawData/#gforce-semg-raw-data",
            "text": "June 22th, 2017  Some versions of gForce provides users with the ability of capturing sEMG raw\ndata with the  sEMG Raw Data Capture Utility \nor  sEMG Raw Data Capture SDK .  sEMG raw data is usually used in medical researching or for the developers\nthat want to build their own gesture recognition algorithm.  If you need such a special version of gForce, please query info@oymotion.com.",
            "title": "gForce sEMG Raw Data"
        },
        {
            "location": "/gForceEMGRawData/gForceEMGRawData/#data-format",
            "text": "The sEMG raw data, which is captured either into files by the sEMG Raw Data \nCapture Utility or by developer's own application built upon the sEMG Raw Data \nSDK, consists of a series of 140-byte packages, each of which consists of\n2-byte (0x8192) magic number, 1-byte CRC, 1-byte package id,  128-byte of 16 \ngroups of 8-channel interleaved sample data and 8-byte time-stamp.",
            "title": "Data Format"
        },
        {
            "location": "/gForceEMGRawData/gForceEMGRawData/#more-about-8-channel-sample-data",
            "text": "It is 1 byte per channel per sample, and the output votage is 0-2.5v, and\namplifier is 800x, therefore, the input vatage of the orignal sEMG is:  $$\\mathcal{In} = 1.25 \\frac{(\\mathcal{Out}-128)}{128 \\times 800}$$",
            "title": "More about 8-Channel Sample Data"
        },
        {
            "location": "/gForceEMGRawData/gForceEMGRawData/#plotting-in-matlab",
            "text": "The following are a bunch of commands to read captured raw data file  rawdata.hex  and plot the channel 0 in Matlab:  >> fp=fopen('rawdata.hex', 'r', 'l');\n>> file_data=fread(fp,'uchar','l');\n>> data=[];\n>> for i=1:140:length(file_data) \n>>     data=[data file_data([i+4:i+131])]; \n>> end\n>> data_2d=reshape(data, 8, []);\n>> figure;\n>> plot(data_2d(1,:));  It must be noted that Matlab uses 1-based array index!  You will be able to see the plotted figure like the following:   If you want to plot channel 7 instead, just replace the last command with:  >> plot(data_2d(8,:));",
            "title": "Plotting in Matlab"
        },
        {
            "location": "/gForceEMGRawData/gForceEMGRawData/#filter-for-semg",
            "text": "sEMG Filters Library  Provides some basic filter functions for sEMG digital signals.",
            "title": "Filter for sEMG"
        },
        {
            "location": "/gForceExample/LobotControlBygForce/LobotControlBygForce/",
            "text": "\u7b80\u4ecb\n\n\n\u8be5\u6587\u6863\u7528\u4e8e\u4ecb\u7ecd\u5982\u4f55\u901a\u8fc7gForce\u63a7\u5236LoBot\u673a\u68b0\u624b\u3002  \n\n\u5728\u9605\u8bfb\u540e\u7eed\u6587\u6863\u5185\u5bb9\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u5df2\u7ecf\n\u719f\u6089\nArduino\n,\u5e76\u5df2\u7ecf\n\u5b89\u88c5\nArduinoIDE\n\u3002\n\n\n\n\n\u4ec0\u4e48\u662fArduino\n\n\n\u5982\u4f55\u5b89\u88c5ArduinoIDE\n   \n\n\n\u5b66\u4e60Arduino\n   \n\n\n\n\n\u5982\u4f55\u4f7f\u7528gForce\u63a7\u5236LoBot\u673a\u68b0\u624b\n\n\n\u672c\u7ae0\u8282\u5f00\u59cb\u8be6\u7ec6\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528gForce\u63a7\u5236LoBot\u673a\u68b0\u624b\uff0c\u5728\u540e\u7eed\u7ae0\u8282\u4e2d\u4f1a\u53cd\u590d\u4f7f\u7528\ngForceJoint\n/\n\ngForce\n/\ngForceSDKArduino\n/\nArduinoMEGA\n\u8fd9\u4e9b\u540d\u8bcd\uff0c\u5177\u4f53\u89e3\u91ca\u8bf7\u53c2\u8003\u94fe\u63a5\u3002\n\n\n\n\n\u4ec0\u4e48\u662fgForce\n      \n\n\n\u4ec0\u4e48\u662fgForceJoint\n   \n\n\n\u4ec0\u4e48\u662fgForceSDKArduino\n   \n\n\n\u4ec0\u4e48\u662fArduinoMEGA\n   \n\n\n\n\n\u5bfc\u5165gForceSDKArduino\n\n\n\n\n\u5982\u4f55\u5bfc\u5165gForceSDKArduino\n\n\n\n\ngForceJoint\u4e0eArduinoMEGA\u7684\u901a\u8baf\u6d4b\u8bd5\n\n\n\n\n\n\n\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u8fde\u63a5gForceJoint\u4e0eArduinoMEGA\n\n\n\u4f7f\u7528ArduinoIDE\u6253\u5f00\n\ngForceJointTest\n\u5de5\u7a0b\uff0c\u5e76\u66f4\u65b0ArduinoMEGA\u7684\u56fa\u4ef6.\n(\u9009\u62e9\n\u201c\u9879\u76ee\u201d->\u201c\u4e0a\u4f20\u201d\n\u66f4\u65b0\u56fa\u4ef6)\n\n\n\u6253\u5f00ArduinoIDE\u91cc\u7684\n\u4e32\u53e3\u76d1\u89c6\u5668\n.\n(\u9009\u62e9\n\u201c\u5de5\u5177\u201d->\u201c\u4e32\u53e3\u76d1\u89c6\u5668\u201d\n\u6253\u5f00\u4e32\u53e3\u76d1\u89c6\u5668)\n\n\n\u8bbe\u7f6e\u4e32\u53e3\u76d1\u89c6\u5668\u6ce2\u7279\u7387\u4e3a115200bps\n\n\n\n\n\u5c06gForce\u8fde\u63a5\u5230gForceJoint\u4e0a\uff0c\u7136\u540e\u505a\u51fa\u76f8\u5e94\u7684\u624b\u52bf\uff0c\u901a\u8fc7\n\u4e32\u53e3\u76d1\u89c6\u5668\n\u5185\u6253\u5370\u7684\u6570\u636e\u5224\u65ad\u662f\u5426\u901a\u8baf\u6b63\u5e38   \n\n\n\n\n\n\n\u5982\u4f55\u4f7fgForce\u4e0egForceJoint\u5efa\u7acb\u8fde\u63a5\n\n\n\n\n\n\n\u5982\u679cgForceJoint\u4e0eArduinoMEGA\u901a\u8baf\u6b63\u5e38\uff0c\u5219\u7ee7\u7eed\u8fdb\u884c\u540e\u7eed\u7ae0\u8282\uff0c\u5426\u5219\u9700\u8981\u627e\u5230\u5e76\u89e3\u51b3\u901a\u8baf\u5931\u8d25\u7684\u95ee\u9898\u3002\n\n\n\n\n\n\ngForceJoint\u4e0eArduinoMEAG\u8fde\u7ebf\u9519\u8bef\uff0cgForce\u4e0egForceJoint\u672a\u6b63\u5e38\u8fde\u63a5\u7b49\u53ef\u80fd\u5bfc\u81f4\u901a\u8baf\u5931\u8d25\n\n\n\n\n\n\nLobot\u673a\u68b0\u624b\u6d4b\u8bd5\n\n\n\n\n\n\n\u5982\u4e0a\u56fe\u6240\u793a\u8fde\u63a5LOBOT\u4e0eArduinoMEAG\n\n\n\u5c06ArduinoMEAG\u4e0ePC\u901a\u8fc7USB\u7ebf\u8fde\u63a5\uff0c\u6253\u5f00\n\nLobotTest\n\u5de5\u7a0b\uff0c\u5e76\u66f4\u65b0ArduinoMEAG\u7684\u56fa\u4ef6 \n(\u9009\u62e9\n\u201c\u9879\u76ee\u201d->\u201c\u4e0a\u4f20\u201d\n\u66f4\u65b0\u56fa\u4ef6)\n\n\n\u89c2\u5bdfLobot\u673a\u68b0\u624b\u7684\u624b\u52bf\u662f\u5426\u6b63\u786e\n\n\n\n\n\u5982\u679cLobot\u673a\u68b0\u624b\u7684\u624b\u52bf\u4e0d\u6b63\u5e38\uff0c\u5219\u9700\u8981\u627e\u5230\u5e76\u89e3\u51b3\u8be5\u95ee\u9898\uff0c\u7136\u540e\u5728\u8fdb\u884c\u4e0b\u4e00\u7ae0\u8282\u3002\n\n\n\n\n\n\nLobot\u4e0eArduinoMEAG\u8fde\u7ebf\u9519\u8bef\uff0c\u7535\u6c60\u7535\u91cf\u4e0d\u8db3\uff0c\u53ca\u673a\u68b0\u624b\u4e0eLOBOT\u8fde\u7ebf\u65b9\u5f0f\u6709\u8bef\u90fd\u53ef\u80fd\u4f1a\u5bfc\u81f4\u673a\u68b0\u624b\u624b\u52bf\u9519\u8bef\n\n\n\n\n\n\ngForce\u4e0eLobot\u673a\u68b0\u624b\u8fde\u63a5\u8c03\u8bd5\n\n\n\n\n\n\n\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u8fde\u63a5\u76f8\u5e94\u7684\u5f00\u53d1\u677f\n\n\n\u5c06ArduinoMEAG\u4e0ePC\u8fde\u63a5\uff0c\u6253\u5f00\nLobotControlBygForce\n\n\u5de5\u7a0b\uff0c\u5e76\u66f4\u65b0ArduinoMEAG\u56fa\u4ef6 \n(\u9009\u62e9\n\u201c\u9879\u76ee\u201d->\u201c\u4e0a\u4f20\u201d\n\u66f4\u65b0\u56fa\u4ef6)\n\n\n\u5c06gForce\u4e0egForceJoint\u8fdb\u884c\u8fde\u63a5\uff0c\u8bd5\u73a9\u673a\u68b0\u624b\u7684\u63a7\u5236\u3002\n\n\n\n\ngForce\u76f8\u5173\u89c6\u9891\n\n\n\u8be5\u5c0f\u8282\u7528\u4e8e\u4ecb\u7ecd\u5982\u4f55\u505a\u597dgForce\u5b9a\u4e49\u7684\u624b\u52bf\u53ca\u76f8\u5173gForce\u5e94\u7528\u89c6\u9891\uff0c\u53c2\u8003\u6807\u51c6\u624b\u52bf\u80fd\u591f\u663e\u8457\u63d0\u9ad8\u624b\u52bf\u8bc6\u522b\u7387\u3002\n\n\n\n\n\u5982\u4f55\u505a\u597dgForce\u5b9a\u4e49\u624b\u52bf\n   \n\n\nOYMotion\u808c\u7535\u667a\u80fd\u4e49\u80a2\n   \n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5728\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u6b22\u8fce\u90ae\u4ef6\u53cd\u9988\u3002 \n\n* \u90ae\u4ef6:info@oymotion.com",
            "title": "LobotControl"
        },
        {
            "location": "/gForceExample/LobotControlBygForce/LobotControlBygForce/#_1",
            "text": "\u8be5\u6587\u6863\u7528\u4e8e\u4ecb\u7ecd\u5982\u4f55\u901a\u8fc7gForce\u63a7\u5236LoBot\u673a\u68b0\u624b\u3002   \n\u5728\u9605\u8bfb\u540e\u7eed\u6587\u6863\u5185\u5bb9\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u5df2\u7ecf \u719f\u6089 Arduino ,\u5e76\u5df2\u7ecf\n\u5b89\u88c5 ArduinoIDE \u3002   \u4ec0\u4e48\u662fArduino  \u5982\u4f55\u5b89\u88c5ArduinoIDE      \u5b66\u4e60Arduino",
            "title": "\u7b80\u4ecb"
        },
        {
            "location": "/gForceExample/LobotControlBygForce/LobotControlBygForce/#gforcelobot",
            "text": "\u672c\u7ae0\u8282\u5f00\u59cb\u8be6\u7ec6\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528gForce\u63a7\u5236LoBot\u673a\u68b0\u624b\uff0c\u5728\u540e\u7eed\u7ae0\u8282\u4e2d\u4f1a\u53cd\u590d\u4f7f\u7528 gForceJoint / gForce / gForceSDKArduino / ArduinoMEGA \u8fd9\u4e9b\u540d\u8bcd\uff0c\u5177\u4f53\u89e3\u91ca\u8bf7\u53c2\u8003\u94fe\u63a5\u3002   \u4ec0\u4e48\u662fgForce         \u4ec0\u4e48\u662fgForceJoint      \u4ec0\u4e48\u662fgForceSDKArduino      \u4ec0\u4e48\u662fArduinoMEGA",
            "title": "\u5982\u4f55\u4f7f\u7528gForce\u63a7\u5236LoBot\u673a\u68b0\u624b"
        },
        {
            "location": "/gForceExample/LobotControlBygForce/LobotControlBygForce/#gforcesdkarduino",
            "text": "\u5982\u4f55\u5bfc\u5165gForceSDKArduino",
            "title": "\u5bfc\u5165gForceSDKArduino"
        },
        {
            "location": "/gForceExample/LobotControlBygForce/LobotControlBygForce/#gforcejointarduinomega",
            "text": "\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u8fde\u63a5gForceJoint\u4e0eArduinoMEGA  \u4f7f\u7528ArduinoIDE\u6253\u5f00 gForceJointTest \u5de5\u7a0b\uff0c\u5e76\u66f4\u65b0ArduinoMEGA\u7684\u56fa\u4ef6. (\u9009\u62e9 \u201c\u9879\u76ee\u201d->\u201c\u4e0a\u4f20\u201d \u66f4\u65b0\u56fa\u4ef6)  \u6253\u5f00ArduinoIDE\u91cc\u7684 \u4e32\u53e3\u76d1\u89c6\u5668 . (\u9009\u62e9 \u201c\u5de5\u5177\u201d->\u201c\u4e32\u53e3\u76d1\u89c6\u5668\u201d \u6253\u5f00\u4e32\u53e3\u76d1\u89c6\u5668)  \u8bbe\u7f6e\u4e32\u53e3\u76d1\u89c6\u5668\u6ce2\u7279\u7387\u4e3a115200bps   \u5c06gForce\u8fde\u63a5\u5230gForceJoint\u4e0a\uff0c\u7136\u540e\u505a\u51fa\u76f8\u5e94\u7684\u624b\u52bf\uff0c\u901a\u8fc7 \u4e32\u53e3\u76d1\u89c6\u5668 \u5185\u6253\u5370\u7684\u6570\u636e\u5224\u65ad\u662f\u5426\u901a\u8baf\u6b63\u5e38       \u5982\u4f55\u4f7fgForce\u4e0egForceJoint\u5efa\u7acb\u8fde\u63a5    \u5982\u679cgForceJoint\u4e0eArduinoMEGA\u901a\u8baf\u6b63\u5e38\uff0c\u5219\u7ee7\u7eed\u8fdb\u884c\u540e\u7eed\u7ae0\u8282\uff0c\u5426\u5219\u9700\u8981\u627e\u5230\u5e76\u89e3\u51b3\u901a\u8baf\u5931\u8d25\u7684\u95ee\u9898\u3002    gForceJoint\u4e0eArduinoMEAG\u8fde\u7ebf\u9519\u8bef\uff0cgForce\u4e0egForceJoint\u672a\u6b63\u5e38\u8fde\u63a5\u7b49\u53ef\u80fd\u5bfc\u81f4\u901a\u8baf\u5931\u8d25",
            "title": "gForceJoint\u4e0eArduinoMEGA\u7684\u901a\u8baf\u6d4b\u8bd5"
        },
        {
            "location": "/gForceExample/LobotControlBygForce/LobotControlBygForce/#lobot",
            "text": "\u5982\u4e0a\u56fe\u6240\u793a\u8fde\u63a5LOBOT\u4e0eArduinoMEAG  \u5c06ArduinoMEAG\u4e0ePC\u901a\u8fc7USB\u7ebf\u8fde\u63a5\uff0c\u6253\u5f00 LobotTest \u5de5\u7a0b\uff0c\u5e76\u66f4\u65b0ArduinoMEAG\u7684\u56fa\u4ef6  (\u9009\u62e9 \u201c\u9879\u76ee\u201d->\u201c\u4e0a\u4f20\u201d \u66f4\u65b0\u56fa\u4ef6)  \u89c2\u5bdfLobot\u673a\u68b0\u624b\u7684\u624b\u52bf\u662f\u5426\u6b63\u786e   \u5982\u679cLobot\u673a\u68b0\u624b\u7684\u624b\u52bf\u4e0d\u6b63\u5e38\uff0c\u5219\u9700\u8981\u627e\u5230\u5e76\u89e3\u51b3\u8be5\u95ee\u9898\uff0c\u7136\u540e\u5728\u8fdb\u884c\u4e0b\u4e00\u7ae0\u8282\u3002    Lobot\u4e0eArduinoMEAG\u8fde\u7ebf\u9519\u8bef\uff0c\u7535\u6c60\u7535\u91cf\u4e0d\u8db3\uff0c\u53ca\u673a\u68b0\u624b\u4e0eLOBOT\u8fde\u7ebf\u65b9\u5f0f\u6709\u8bef\u90fd\u53ef\u80fd\u4f1a\u5bfc\u81f4\u673a\u68b0\u624b\u624b\u52bf\u9519\u8bef",
            "title": "Lobot\u673a\u68b0\u624b\u6d4b\u8bd5"
        },
        {
            "location": "/gForceExample/LobotControlBygForce/LobotControlBygForce/#gforcelobot_1",
            "text": "\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u8fde\u63a5\u76f8\u5e94\u7684\u5f00\u53d1\u677f  \u5c06ArduinoMEAG\u4e0ePC\u8fde\u63a5\uff0c\u6253\u5f00 LobotControlBygForce \n\u5de5\u7a0b\uff0c\u5e76\u66f4\u65b0ArduinoMEAG\u56fa\u4ef6  (\u9009\u62e9 \u201c\u9879\u76ee\u201d->\u201c\u4e0a\u4f20\u201d \u66f4\u65b0\u56fa\u4ef6)  \u5c06gForce\u4e0egForceJoint\u8fdb\u884c\u8fde\u63a5\uff0c\u8bd5\u73a9\u673a\u68b0\u624b\u7684\u63a7\u5236\u3002",
            "title": "gForce\u4e0eLobot\u673a\u68b0\u624b\u8fde\u63a5\u8c03\u8bd5"
        },
        {
            "location": "/gForceExample/LobotControlBygForce/LobotControlBygForce/#gforce",
            "text": "\u8be5\u5c0f\u8282\u7528\u4e8e\u4ecb\u7ecd\u5982\u4f55\u505a\u597dgForce\u5b9a\u4e49\u7684\u624b\u52bf\u53ca\u76f8\u5173gForce\u5e94\u7528\u89c6\u9891\uff0c\u53c2\u8003\u6807\u51c6\u624b\u52bf\u80fd\u591f\u663e\u8457\u63d0\u9ad8\u624b\u52bf\u8bc6\u522b\u7387\u3002   \u5982\u4f55\u505a\u597dgForce\u5b9a\u4e49\u624b\u52bf      OYMotion\u808c\u7535\u667a\u80fd\u4e49\u80a2",
            "title": "gForce\u76f8\u5173\u89c6\u9891"
        },
        {
            "location": "/gForceExample/LobotControlBygForce/LobotControlBygForce/#_2",
            "text": "\u5728\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u6b22\u8fce\u90ae\u4ef6\u53cd\u9988\u3002  \n* \u90ae\u4ef6:info@oymotion.com",
            "title": "\u95ee\u9898\u53cd\u9988"
        },
        {
            "location": "/gForceNeuron/gForceNeuronUserGuide/",
            "text": "gForce Neuron User Guide\n\n\nJune 22th, 2017\n\n\nComing soon...",
            "title": "gForceNeuron"
        },
        {
            "location": "/gForceNeuron/gForceNeuronUserGuide/#gforce-neuron-user-guide",
            "text": "June 22th, 2017  Coming soon...",
            "title": "gForce Neuron User Guide"
        },
        {
            "location": "/gForceDataProtocol/gForceDataProtocol/",
            "text": "gForce Data Procol\n\n\nJune 22, 2017",
            "title": "gForceDataProtocol"
        },
        {
            "location": "/gForceDataProtocol/gForceDataProtocol/#gforce-data-procol",
            "text": "June 22, 2017",
            "title": "gForce Data Procol"
        },
        {
            "location": "/openSoftwareList/openSoftware/",
            "text": "Open Software List\n\n\nOct 11th,2017\n\n\n\n\ngForce SDK for Arduino\n\n\n\n\nThe open source library with example code to illustrate how to connnect\n  gForce to Arduino-alike devices.\n\n\n\n\ngForce Data Protocol Sample\n\n\n\n\nAn open source simple example developed for Android to illustrate\n\n\n\n\ngForceApp\n\n\n\n\nThe \nhub\n application for other applications to interact with\n  gForce. It also provides utilities for users setting, firmware upgrading and\n  diagnosing gForce. Released APK is open for downloading.\n  Internal testing, coming soon......\n\n\n\n\nsEMG Filters Library\n\n\n\n\nProvides some basic filter functions for sEMG digital signals.",
            "title": "OpenSoftware"
        },
        {
            "location": "/openSoftwareList/openSoftware/#open-software-list",
            "text": "Oct 11th,2017   gForce SDK for Arduino   The open source library with example code to illustrate how to connnect\n  gForce to Arduino-alike devices.   gForce Data Protocol Sample   An open source simple example developed for Android to illustrate   gForceApp   The  hub  application for other applications to interact with\n  gForce. It also provides utilities for users setting, firmware upgrading and\n  diagnosing gForce. Released APK is open for downloading.\n  Internal testing, coming soon......   sEMG Filters Library   Provides some basic filter functions for sEMG digital signals.",
            "title": "Open Software List"
        },
        {
            "location": "/downloadList/Download/",
            "text": "Download List\n\n\nMay 12th,2018\n\n\n\n\n\n\ngForceSDK\n\n\nSoftware development kit for gForce armband.Only \nwindows\n is supported.\n\n\n\n\n\n\nMay 3th,2018\n\n\n\n\n\n\nTraining Tool\n\n\nTraining tool for gForce and OHand.\n\n\n\n\n\n\nOct 11th,2017\n\n\n\n\n\n\ngForceApp for Android  gForceApp_v2.3.4-20171009.apk\n\n\nPre-built releases of gForceApp for Android.\n\n\n\n\n\n\nsEMG Raw Data Capture Utility\n\n\nOnly for gForce 100 with support for raw data capturing.\n\n\n\n\n\n\nsEMG Raw Data Capture SDK\n\n\nOnly for gForce 100 with support for raw data capturing.\n\n\n\n\n\n\ndownload serial port driver\n\n\nserial port driver for Arduino MEGA\n\n\n\n\n\n\ndownload gForceDongle driver\n\n\nserial port driver for gForceDongle",
            "title": "Download"
        },
        {
            "location": "/downloadList/Download/#download-list",
            "text": "May 12th,2018    gForceSDK  Software development kit for gForce armband.Only  windows  is supported.    May 3th,2018    Training Tool  Training tool for gForce and OHand.    Oct 11th,2017    gForceApp for Android  gForceApp_v2.3.4-20171009.apk  Pre-built releases of gForceApp for Android.    sEMG Raw Data Capture Utility  Only for gForce 100 with support for raw data capturing.    sEMG Raw Data Capture SDK  Only for gForce 100 with support for raw data capturing.    download serial port driver  serial port driver for Arduino MEGA    download gForceDongle driver  serial port driver for gForceDongle",
            "title": "Download List"
        }
    ]
}